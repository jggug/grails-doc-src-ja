{hidden}
Unit testing are tests at the "unit" level. In other words you are testing individual methods or blocks of code without consideration for surrounding infrastructure. Unit tests are typically run without the presence of physical resources that involve I/O such databases, socket connections or files. This is to ensure they run as quick as possible since quick feedback is important.
{hidden}

Unitテストは"単体"レベルのテストです。具体的には、環境周りを考慮せずに個々のメソッドやブロック単位で行うテストのことです。Unitテストは基本的にデータベース、ネットワーク接続、ファイルなどのI/Oを必要とする物理リソースを必要としません。素早いフィードバックを得られるように、Unitテストの実行時間はできる限り短くしてください。

{hidden}
h4. The Test Mixins
{hidden}

h4. テストMixin

{hidden}
Since Grails 2.0, a collection of unit testing mixins is provided by Grails that lets you enhance the behavior of a typical JUnit 3, JUnit 4 or Spock test. The following sections cover the usage of these mixins.
{hidden}

Grails 2.0以降、MixinのUnitテストライブラリがGrailsによって提供されており、代表的なJUnit 3、JUnit 4、Spockを使用したテストの実行をサポートします。以下の節では、Mixinの使い方について記載しています。

{hidden}
{note}
The previous JUnit 3-style @GrailsUnitTestCase@ class hierarchy is still present in Grails for backwards compatibility, but is now deprecated. The previous documentation on the subject can be found in the [Grails 1.3.x documentation|http://grails.org/doc/1.3.x/guide/9.%20Testing.html]
{note}
{hidden}

{note}
以前の@GrailsUnitTestCase@クラスを継承するJUnit 3スタイルは、下位バージョンとの互換性のためにGrailsにまだ存在しています。しかし今は非推奨です。過去のドキュメントは[Grails 1.3.x ドキュメンテーション|http://grails.org/doc/1.3.x/guide/9.%20Testing.html]で見つけることができます。
{note}

{hidden}
You won't normally have to import any of the testing classes because Grails does that for you. But if you find that your IDE for example can't find the classes, here they all are:
{hidden}

Grailsは自動でテストクラスをインポートするため、全てのテストクラスをインポートしなくても問題ありません。しかし、IDEでテストクラスを探せないことがあるかもしれないので、下記にそれらすべてのテストクラスを列挙します。

* @grails.test.mixin.TestFor@
* @grails.test.mixin.TestMixin@
* @grails.test.mixin.Mock@
* @grails.test.mixin.support.GrailsUnitTestMixin@
* @grails.test.mixin.domain.DomainClassUnitTestMixin@
* @grails.test.mixin.services.ServiceUnitTestMixin@
* @grails.test.mixin.web.ControllerUnitTestMixin@
* @grails.test.mixin.web.FiltersUnitTestMixin@
* @grails.test.mixin.web.GroovyPageUnitTestMixin@
* @grails.test.mixin.web.UrlMappingsUnitTestMixin@
* @grails.test.mixin.webflow/WebFlowUnitTestMixin@

{hidden}
Note that you're only ever likely to use the first two explicitly. The rest are there for reference.
{hidden}
常に明示的に使うのは最初の２つのクラスだけであることに注意してください。残りはリファレンスのために列挙しています。

{hidden}
h4. Test Mixin Basics
{hidden}

h4. テストMixinの基本

{hidden}
Most testing can be achieved via the @TestFor@ annotation in combination with the @Mock@ annotation for mocking collaborators. For example, to test a controller and associated domains you would define the following:
{hidden}

ほとんどのテストは、モックを使用するため@Mock@アノテーションと@TestFor@アノテーションを組み合わせて使用します。例えば、コントローラーとドメインをテストするためには次のように定義します。

{code}
\@TestFor(BookController)
\@Mock([Book, Author, BookService])
{code}

{hidden}
The @TestFor@ annotation defines the class under test and will automatically create a field for the type of class under test. For example in the above case a "controller" field will be present, however if @TestFor@ was defined for a service a "service" field would be created and so on.
{hidden}

@TestFor@アノテーションは、テスト対象のクラスを定義することで自動的にクラスタイプのフィールドを生成します。例えば、上記の場合、"controller"フィールドを生成します。また、もし@TestFor@にサービスが定義されている場合、"service"フィールドが生成されます。

{hidden}
The @Mock@ annotation creates mock version of any collaborators. There is an in-memory implementation of GORM that will simulate most interactions with the GORM API. For those interactions that are not automatically mocked you can use the built in support for defining mocks and stubs programmatically. For example:
{hidden}

@Mock@アノテーションは複数の種類のモックを生成します。ほとんどのGORM APIの振る舞いをシミュレートするインメモリのGORM実装があります。自動でモック化されない振る舞いに対しては、ビルトインされているモック、スタブの作成機能が使用できます。例えば、次の通りです。


{code}
void testSearch() {
      def control = mockFor(SearchService)
      control.demand.searchWeb { String q -> ['mock results'] }
      control.demand.static.logResults { List results ->  }
      controller.searchService = control.createMock()
      controller.search()
      
      assert controller.response.text.contains "Found 1 results"
}

{code}
