{hidden}
A Promise is a concept being embraced by many concurrency frameworks. They are similar to @java.util.concurrent.Future@ instances, but include a more user friendly exception handling model, useful features like chaining and the ability to attach listeners.
{hidden}
Promiseはさまざまな並行フレームワークで取り入れられている概念です。この概念は@java.util.concurrent.Future@によく似ていますが、より使いやすい例外ハンドリングモデルや、非同期処理の連鎖、リスナーの追加といったさまざまな便利な機能を備えています。

{hidden}
h3. Promise Basics
{hidden}
h3. Promiseの基本

{hidden}
In Grails the @grails.async.Promises@ class provides the entry point to the Promise API:
{hidden}
GrailsではPromise APIの入り口として@grails.async.Promises@クラスを提供しています。

{code}
import static grails.async.Promises.*
{code}

{hidden}
To create promises you can use the @task@ method, which returns an instance of the @grails.async.Promise@ interface:
{hidden}
promiseを作成するには@task@メソッドを使用します。これは@grails.async.Promise@インタフェースのインタンスを返します。

{code}
def p1 = task { 2 * 2 }
def p2 = task { 4 * 4 }
def p3 = task { 8 * 8 }
assert [4,16,64] == waitAll(p1, p2, p3)
{code}

{hidden}
The @waitAll@ method waits synchronously, blocking the current thread, for all of the concurrent tasks to complete and returns the results.
{hidden}
@waitAll@メソッドは現在のスレッドをブロックした状態で処理を待ち合わせ、すべての並行タスクが完了した時点で結果を返します。

{hidden}
If you prefer not to block the current thread you can use the @onComplete@ method:
{hidden}
もし現在のスレッドをブロックしたくない場合は@onComplete@メソッドを使用します。

{code}
onComplete([p1,p2,p3]) { List results ->
   assert [4,16,64] == results
}
{code}

{hidden}
The @waitAll@ method will throw an exception if an error occurs executing one of the promises. The originating exception will be thrown. The @onComplete@ method, however, will simply not execute the passed closure if an exception occurs. You can register an @onError@ listener if you wish to handle exceptions without blocking:
{hidden}
@waitAll@メソッドはpromiseのいずれかでエラーが発生した場合に例外をスローします。これは発信元の例外がスローされます。@onComplete@メソッドを使用した場合は、単にクロージャが実行されないだけです。もしブロッキングせずに例外を処理したい場合は@onError@メソッドを使用してリスナーを登録できます。

{code}
onError([p1,p2,p3]) { Throwable t ->
   println "An error occured ${t.message}"
}
{code}

{hidden}
If you have just a single long running promise then the @grails.async.Promise@ interface provides a similar API on the promise itself. For example:
{hidden}
もし単一で処理に長い時間が必要となるpromiseがある場合は、@grails.async.Promise@インターフェース自身で同様のAPIを提供しています。例えば以下のように使用します。

{code}
import static java.util.concurrent.TimeUnit.*
import static grails.async.Promises.*

Promise p = task {
	// Long running task
}
p.onError { Throwable err ->
	println "An error occured ${err.message}"
}
p.onComplete { result ->
    println "Promise returned $result"
}
// block until result is called
def result = p.get()
// block for the specified time
def result = p.get(1,MINUTES)
{code}

{hidden}
h3. Promise Chaining
{hidden}
h3. Promiseのチェーン

{hidden}
It is possible to chain several promises and wait for the chain to complete using the @then@ method:
{hidden}
@then@メソッドを使用してpromiseをチェーンすることで、チェーンの完了を待ち合わせることができます。

{code}
final polish = { ... }
final transform = { ... }
final save = { ... }
final notify = { ... }

Promise promise = task {
    // long running task
}
promise.then polish then transform then save then {
	// notify end result
}
{code}

{hidden}
If an exception occurs at any point in the chain it will be propagated back to the caller and the next step in the chain will not be called.
{hidden}
もし途中のチェーンで例外が発生した場合は、呼び出し元に例外がスローされ、次のチェーンが呼ばれることはありません。

{hidden}
h3. Promise Lists and Maps
{hidden}
h3. Promiseのリストとマップ

{hidden}
Grails' async API also features the concept of a promise lists and maps. These are represented by the @grails.async.PromiseList@ and @grails.async.PromiseMap@ classes respectively.
{hidden}
Grailsの非同期APIはpromiseのリストとマップの概念を備えています。これらはぞれぞれ@grails.async.PromiseList@、@grails.async.PromiseMap@のクラスとして実装されています。

{hidden}
The easiest way to create a promise list or map is via the @tasks@ method of the @Promises@ class:
{hidden}
promiseのリストやマップを作成する簡単な方法は、@Promises@クラスの@tasks@メソッドを使用することです。

{code}
import static grails.async.Promises.*

def promiseList = tasks { 2 * 2 }, { 4 * 4}, { 8 * 8 }

assert [4,16,64] == promiseList.get()
{code}

{hidden}
The @tasks@ method, when passed a list of closures, returns a @PromiseList@. You can also construct a @PromiseList@ manually:
{hidden}
@tasks@メソッドはクロージャのリストを引数に取り@PromiseList@を返します。または手動で@PromiseList@を構築することもできます。

{code}
import grails.async.*

def list = new PromiseList()
list << { 2 * 2 }
list << { 4 * 4 }
list << { 8 * 8 }
list.onComplete { List results ->
  assert [4,16,64] == results
}
{code}

{hidden}
{note}
The @PromiseList@ class does not implement the java.util.List interface, but instead returns a java.util.List from the get() method 
{note}
{hidden}
{note}
@PromiseList@クラスはjava.util.Listのインタフェースを実装していません。代わりにget()メソッドを使用することでjava.util.Listとして取得できます。
{note}

{hidden}
Working with @PromiseMap@ instances is largely similar. Again you can either use the @tasks@ method:
{hidden}
@PromiseMap@を扱う場合もほとんど同じです。@tasks@メソッドを使用する場合は以下のようにします。


{code}
import static grails.async.Promises.*

def promiseList = tasks one:{ 2 * 2 }, 
                        two:{ 4 * 4}, 
                        three:{ 8 * 8 }

assert [one:4,two:16,three:64] == promiseList.get()
{code}

{hidden}
Or construct a @PromiseMap@ manually:
{hidden}
手動で@PromiseMap@を使用して構築する場合は以下のようにします。

{code}
import grails.async.*

def list = new PromiseMap()
map['one'] = { 2 * 2 }
map['two'] = { 4 * 4 }
map['three'] = { 8 * 8 }
map.onComplete { Map results ->
  assert [one:4,two:16,three:64] == results
}
{code}

{hidden}
h3. Promise Factories
{hidden}
h3. Promiseファクトリ

{hidden}
The @Promises@ class uses a @grails.async.PromiseFactory@ instance to create @Promise@ instances.
{hidden}
@Promises@クラスは@Promise@インスタンスを生成するために@grails.async.PromiseFactory@インスタンスを使用しています。

{hidden}
The default implementation uses the GPars concurrency library and is called @org.grails.async.factory.gpars.GparsPromiseFactory@, however it is possible to swap implementations by setting the @Promises.promiseFactory@ variable.
{hidden}
デフォルトの実装ではGParsの並行ライブリである@org.grails.async.factory.gpars.GparsPromiseFactory@が使用されていますが、@Promises.promiseFactory@の値を変更することで実装を差し替えることができます。

{hidden}
One common use case for this is unit testing, typically you do not want promises to execute asynchronously during unit tests, as this makes tests harder to write. For this purpose Grails ships with a @org.grails.async.factory.SynchronousPromiseFactory@ instance that makes it easier to test promises:
{hidden}
よくある使用例はユニットテストです。たいていの場合にpromiseを非同期に実行して、ユニットテストを行うことは非常に困難になります。Grailsでは、このような目的のために@org.grails.async.factory.SynchronousPromiseFactory@を提供しており、これを使用することで簡単にpromiseのテストが行えます。

{code}
import org.grails.async.factory.*
import grails.async.*

Promises.promiseFactory = new SynchronousPromiseFactory()
{code}

{hidden}
Using the @PromiseFactory@ mechanism is theoritically possible to plug in other concurrency libraries into the Grails framework.
{hidden}
また、@PromiseFactory@の仕組みを使用することで、Grailsに他の並行ライブラリを組み込みということも論理的には可能です。

{hidden}
h3. DelegateAsync Transformation
{hidden}
h3. DelegateAsync変換

{hidden}
It is quite common to require both synchronous and asynchronous versions of the same API. Developing both can result in a maintenance problem as typically the asynchronous API would simply delegate to the synchronous version.
{hidden}
同じAPIにおいて、同期API/非同期APIの両方が必要となることがよくあります。このような場合に、非同期APIは単に同期APIに処理を委譲させるといった方法では、保守上問題を引き起こすことがあります。

{hidden}
The @DelegateAsync@ transformation is designed to mitigate this problem by transforming any synchronous API into an asynchronous one.
{hidden}
@DelegateAsync@変換は、同期APIを非同期APIに変換することで、この問題を軽減できるように設計しています。

{hidden}
For example, consider the following service:
{hidden}
例えば次のようなサービスについて考えてみます。

{code}
class BookService {	
    List<Book> findBooks(String title) {
      // implementation
    }
}
{code}

{hidden}
The @findBooks@ method executes synchronously in the same thread as the caller. To make an asynchronous version of this API you can define another class as follows:
{hidden}
@findBooks@メソッドは呼び出し元と同じスレッドで同期的に実行されます。ここで次のような別クラスを定義することで、このAPIの非同期バージョンを作成できます。

{code}
import grails.async.*

class AsyncBookService {
   @DelegateAsync BookService bookService	
}
{code}

{hidden}
The @DelegateAsync@ transformation will automatically add a new method that looks like the following to the @AsyncBookService@ class:
{hidden}
@DelegateAsync@変換は、自動的に@AsyncBookService@クラスに次のようなメソッドを追加します。

{code}
Promise<List<Book>> findBooks(String title) {
    Promises.task {
       bookService.findBooks(title)
    }
}
{code}

{hidden}
As you see the transform adds equivalent methods that return a Promise and execute asynchronously.
{hidden}
上記のように@DelegateAsync@変換は非同期に処理を行い、Promiseを返すメソッドを追加します。

{hidden}
The @AsyncBookService@ can then be injected into other controllers and services and used as follows:
{hidden}
この@AsyncBookService@は、他のコントローラやサービスに注入され、次のように使用できます。

{code}
AsyncBookService asyncBookService
def findBooks(String title) {
    asyncBookService.findBooks(title)
       .onComplete { List results ->
          println "Books = ${results}"				
       }
}
{code}
