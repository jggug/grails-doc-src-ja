{hidden}
Since Grails 2.3, GORM features an asynchronous programming model that works across all supported datastores (Hibernate, MongoDB etc.).
{hidden}
Grails 2.3から、GORMでサポートされているすべてのデータストア(Hibernate、MongoDBなど)に対して、横断的に動作する非同期プログラミングモデルを提供しています。

{hidden}
h3. Async Namespace
{hidden}
h3. Asyncネームスペース

{hidden}
The Asynchronous GORM API is available on every domain class via the @async@ namespace.
{hidden}
非同期GROM APIは、すべてのドメインクラスに対し@async@ネームスペースを通じて提供されます。

{hidden}
For example, the following code listing reads 3 objects from the database asynchronously:
{hidden}
例えば次のコードはデータベースから非同期に3つのオブジェクトを読み込みます。

{code}
import static grails.async.Promises.*

def p1 = Person.async.get(1L)
def p2 = Person.async.get(2L)
def p3 = Person.async.get(3L)
def results = waitAll(p1, p2, p3)
{code}

{hidden}
Using the @async@ namespace, all the regular GORM methods are available (even dynamic finders), but instead of executing synchronously, the query is run in the background and a @Promise@ instance is returned.
{hidden}
@async@ネームスペースでは、通常使用可能なすべてのGORMメソッドが使用できます(ダイナミックファインダーのような)。ただし同期的に実行されるのではなく、バックグラウンドでクエリーが実行され、@Promise@インスタンスを返します。

{hidden}
The following code listing shows a few common examples of GORM queries executed asynchronously:
{hidden}
次のコードは、GORMのクエリーを非同期に実行します。

{code}
import static grails.async.Promises.*

Person.async.list().onComplete { List results ->
  println "Got people = ${results}"
}
def p = Person.async.getAll(1L, 2L, 3L)
List results = p.get()

def p1 = Person.async.findByFirstName("Homer")
def p2 = Person.async.findByFirstName("Bart")
def p3 = Person.async.findByFirstName("Barney")
results = waitAll(p1, p2, p3)
{code}

{hidden}
h3. Async and the Session
{hidden}
h3. 非同期とセッション

{hidden}
When using GORM async each promise is executed in a different thread. Since the Hibernate session is not concurrency safe, a new session is bound per thread.
{hidden}
GORMを非同期に使用する場合、promiseはそれぞれ別々のスレッドで実行されます。またHibernateのセッションはスレッドセーフではないため、スレッドごとに新しいセッションをバインドします。

{hidden}
This is an important consideration when using GORM async (particularily with Hibernate as the persistence engine). The objects returned from asynchronous queries will be detached entities.
{hidden}
非同期にGORMを使用する場合は、この点に十分考慮する必要があります(特に永続化エンジンにHibernateを使用する場合)。特に非同期クエリから返されるオブジェクトは、デタッチされたエンティティであることに注意をしてください。

{hidden}
This means you cannot save objects returned from asynchronous queries without first merging them back into session. For example the following will not work:
{hidden}
これは非同期クエリから返されたオブジェクトは、初めに起動したセッションにはマージされず、保存できないことを意味しています。例えば次のようなコードは正しく動作しません。

{code}
def promise = Person.async.findByFirstName("Homer")
def person = promise.get()
person.firstName = "Bart"
person.save()
{code}

{hidden}
Instead you need to merge the object with the session bound to the calling thread. The above code needs to be written as:
{hidden}
正しく動作させるには、呼び出し元のスレッドにバインドされているセッションにオブジェクトをマージする必要があります。

{code}
def promise = Person.async.findByFirstName("Homer")
def person = promise.get()
person.merge()
person.firstName = "Bart"
{code}

{hidden}
Note that @merge()@ is called first because it may refresh the object from the cache or database, which would result in the change being lost. In general it is not recommended to read and write objects in different threads and you should avoid this technique unless absolutely necessariy.
{hidden}
まず始めに@merge()@を呼びだしています。これはキャッシュまたはデータベースのデータが再読み込みされ、それまでに行った変更が失われてしまうためです。また一般的に異なるスレッド間でオブジェクトを読み書きすることは推奨されません。もし必要がない限り、この方法は絶対に避けるべきです。

{hidden}
Finally, another issue with detached objects is that association lazy loading *will not* work and you will encounter @LazyInitializationException@ errors if you do so. If you plan to access the associated objects of those returned from asynchronous queries you should use eager queries (which is recommended anyway to avoid N+1 problems).
{hidden}
最後に、デタッチされたオブジェクトの別の問題として、関連をlazyローディングしようとすると@LazyInitializationException@を引き起こすという問題があります。もし非同期クエリから取得したオブジェクトの関連にアクセスする場合は、eagerクエリとして実行してください(N+1問題を避けるために、強くお勧めします)。

{hidden}
h3. Multiple Asynchronous GORM calls
{hidden}
h3. 複数の非同期GORMの呼び出し

{hidden}
As discussed in the previous section you should avoid reading and writing objects in different threads as merging tends to be inefficient.
{hidden}
上記で説明したように、マージは問題を引き起こす可能性が高いため、異なるスレッド間でのオブジェクトの読み書きは避けるべきです。

{hidden}
However, if you wish to do more complex GORM work asynchronously then the GORM async namespace provides a @task@ method that makes this possible. For example:
{hidden}
しかし、GROMのasyncネームスペースが提供している@task@メソッドを使用することで、より複雑なGORMの非同期処理が可能になります。例えば以下のように使用します。

{code}
def promise = Person.async.task {
    withTransaction {
       def person = findByFirstName("Homer")
       person.firstName = "Bart"
       person.save(flush:true)    
    }
}

Person updatedPerson = promise.get()
{code}

{hidden}
Note that the GORM @task@ method differs from the static @Promises.task@ method in that it deals with binding a new session to the asynchronous thread for you. If you do not use the GORM version and do asynchronous work with GORM then you need to do this manually. Example:
{hidden}
GORMの@task@メソッドは静的な@Promises.task@メソッドとは異なり、非同期処理のスレッドに対して自動的に新いセッションをバインドします。もしGROMの@task@メソッドを使用せず非同期にGORMの処理を行う場合は、これを手動で行う必要があります。

{code}
import static grails.async.Promises.*

def promise = task {
    Person.withNewSession {
    	// your logic here
    }
}
{code}

{hidden}
h3. Async DetachedCriteria
{hidden}
h3. 非同期DetachedCriteria

{hidden}
The @DetachedCriteria@ class also supports the @async@ namespace. For example you can do the following:
{hidden}
DetachedCriteriaクラスも@async@ネームスペースをサポートしています。例えば次のように使用できます。

{code}
DetachedCriteria query = Person.where {
    lastName == "Simpson"
}

def promise = query.async.list()
{code}



