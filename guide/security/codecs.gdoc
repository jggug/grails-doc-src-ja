{hidden}Grails supports the concept of dynamic encode/decode methods.  A set of standard codecs are bundled with Grails.  Grails also supports a simple mechanism for developers to contribute their own codecs that will be recognized at runtime.{hidden}
Grailsは動的なエンコード/デコードメソッドという考え方をサポートしています。標準的なコーデックはGrailsにバンドルされているほか、開発者が独自のコーデックを簡単に定義することのできるメカニズムも備えています。

{hidden}h4. Codec Classes{hidden}
h4. コーデッククラス

{hidden}A Grails codec class is one that may contain an encode closure, a decode closure or both.  When a Grails application starts up the Grails framework dynamically loads codecs from the @grails-app/utils/@ directory.{hidden}
Grailsのコーデッククラスは、encodeクロージャとdecodeクロージャのいずれか、または両方を実装したものです。Grailsフレームワークは、Grailsアプリケーションが起動するときに、@grails-app/utils/@ディレクトリ以下にあるコーデックを動的にロードします。

{hidden}The framework looks under @grails-app/utils/@ for class names that end with the convention @Codec@.  For example one of the standard codecs that ships with Grails is @HTMLCodec@.{hidden}
Grailsフレームワークは@grails-app/utils/@ディレクトリ以下にある、@Codec@という名前で終わるクラスを探します。例えば、Grailsに標準で実装されているコーデックの一つに@HTMLCodec@があります。

{hidden}If a codec contains an @encode@ closure Grails will create a dynamic @encode@ method and add that method to the @Object@ class with a name representing the codec that defined the encode closure. For example, the @HTMLCodec@ class defines an @encode@ closure, so Grails attaches it with the name @encodeAsHTML@.{hidden}
コーデックに@encode@クロージャが定義されている場合、Grailsは動的な@encode@メソッドを作成し、そのクロージャを定義しているコーデックの名前でそのメソッドを@Object@クラスに追加します。例えば、@HTMLCodec@クラスでは@encode@クロージャが定義されているため、Grailsは@encodeAsHTML@という名前でメソッドを追加します。

{hidden}The @HTMLCodec@ and @URLCodec@ classes also define a @decode@ closure, so Grails attaches those with the names @decodeHTML@ and @decodeURL@ respectively. Dynamic codec methods may be invoked from anywhere in a Grails application. For example, consider a case where a report contains a property called 'description' which may contain special characters that must be escaped to be presented in an HTML document.  One way to deal with that in a GSP is to encode the description property using the dynamic encode method as shown below:{hidden}
さらに、@HTMLCodec@クラスと@URLCodec@クラスでは@decode@クロージャも定義されているので、Grailsはこれらをそれぞれ@decodeHTML@, @decodeURL@という名前で追加します。動的なコーデックメソッドはGrailsアプリケーションのどこからでも呼び出すことができます。例えば、@report@が@description@という名前のプロパティを持っているケースを想定します。@description@は特殊文字を文字を含んでいる可能性があるため、HTMLドキュメントとして表示させる前にエスケープする必要があるとします。GSPでこれを実現する一つの方法は、以下のように、動的なエンコードメソッドを使用して@description@プロパティをエンコードすることです:

{code:java}
${report.description.encodeAsHTML()}
{code}

{hidden}Decoding is performed using @value.decodeHTML()@ syntax.{hidden}
同様に、デコードは@value.decodeHTML()@というような形で行うことができます。

{hidden}h4. Standard Codecs{hidden}
h4. 標準コーデック

{hidden}*HTMLCodec*{hidden}
*HTMLCodec*

{hidden}This codec performs HTML escaping and unescaping, so that values can be rendered safely in an HTML page without creating any HTML tags or damaging the page layout. For example, given a value "Don't you know that 2 > 1?" you wouldn't be able to show this safely within an HTML page because the > will look like it closes a tag, which is especially bad if you render this data within an attribute, such as the value attribute of an input field.{hidden}
このコーデックはHTMLのエスケープ/アンエスケープ処理を行います。これにより、HTMLタグが挿入されたりレイアウトを破壊される恐れなく、安全にHTMLページで値を表示することができます。例えば、"Don't you know that 2 > 1?" という文章を表示することを考えてみます。> が閉じタグのように扱われてしまうため、この値をエスケープ処理なしで安全にHTMLページに表示させることはできません。このようなデータを属性 (例えばinputフィールドのvalue属性) の中に表示させる場合はさらに大変です。

{hidden}Example of usage:{hidden}
使用例を以下に示します:

{code:java}
<input name="comment.message" value="${comment.message.encodeAsHTML()}"/>
{code}

{note}
{hidden}Note that the HTML encoding does not re-encode apostrophe/single quote so you must use double quotes on attribute values to avoid text with apostrophes affecting your page.{hidden}
HTMLエンコードでは、アポストロフィ/シングルクォートを再エンコードしないことに注意してください。エンコードする文字列にアポストロフィが入っている場合に備えて、属性の値はダブルクォートで括ってください。
{note}

{hidden}*URLCodec*{hidden}
*URLCodec*

{hidden}URL encoding is required when creating URLs in links or form actions, or any time data is used to create a URL. It prevents illegal characters from getting into the URL and changing its meaning, for example "Apple & Blackberry" is not going to work well as a parameter in a GET request as the ampersand will break parameter parsing.{hidden}
URLエンコードは、リンクやフォームのアクション用にURLを生成する場合や、データを使ってURLを作成するあらゆる場合に必要です。エンコードすることによって、URLに不正な文字列が混入して意味を変えてしまうことを防ぐことができます。例えば、"Apple & Blackberry" という文字列には & 記号が含まれているため、そのままGETリクエストのパラメタとして使用することができません。

{hidden}Example of usage:{hidden}
使用例を以下に示します:

{code:java}
<a href="/mycontroller/find?searchKey=${lastSearch.encodeAsURL()}">
Repeat last search
</a>
{code}

{hidden}*Base64Codec*{hidden}
*Base64Codec*

{hidden}Performs Base64 encode/decode functions. Example of usage:{hidden}
Base64エンコード/デコードを行います。使用例を以下に示します:

{code:java}
Your registration code is: ${user.registrationCode.encodeAsBase64()}
{code}

{hidden}*JavaScriptCodec*{hidden}
*JavaScriptCodec*

{hidden}Escapes Strings so they can be used as valid JavaScript strings. For example:{hidden}
JavaScriptの文字列として正しい形式になるように、文字列をエスケープします。例えば次のように使用します:

{code:java}
Element.update('${elementId}',
    '${render(template: "/common/message").encodeAsJavaScript()}')
{code}

{hidden}*HexCodec*{hidden}
*HexCodec*

{hidden}Encodes byte arrays or lists of integers to lowercase hexadecimal strings, and can decode hexadecimal strings into byte arrays. For example:{hidden}
byte配列または整数のリストを小文字16進数表記の文字列にエンコードしたり、逆に16進数表記の文字列をbyte配列にデコードすることができます。例えば次のように使用します:

{code:java}
Selected colour: #${[255,127,255].encodeAsHex()}
{code}

{hidden}*MD5Codec*{hidden}
*MD5Codec*

{hidden}Uses the MD5 algorithm to digest byte arrays or lists of integers, or the bytes of a string (in default system encoding), as a lowercase hexadecimal string. Example of usage:{hidden}
MD5アルゴリズムを使用してbyte配列や整数のリスト、文字列 (システムのデフォルトエンコーディング) のダイジェスト値を計算し、小文字16進数表記の文字列にエンコードします。使用例を以下に示します:

{code:java}
Your API Key: ${user.uniqueID.encodeAsMD5()}
{code}

{hidden}*MD5BytesCodec*{hidden}
*MD5BytesCodec*

{hidden}Uses the MD5 algorithm to digest byte arrays or lists of integers, or the bytes of a string (in default system encoding), as a byte array. Example of usage:{hidden}
MD5アルゴリズムを使用してbyte配列や整数のリスト、文字列 (システムのデフォルトエンコーディング) のダイジェスト値を計算し、byte配列にエンコードします。使用例を以下に示します:

{code:java}
byte[] passwordHash = params.password.encodeAsMD5Bytes()
{code}

{hidden}*SHA1Codec*{hidden}
*SHA1Codec*

{hidden}Uses the SHA1 algorithm to digest byte arrays or lists of integers, or the bytes of a string (in default system encoding), as a lowercase hexadecimal string. Example of usage:{hidden}
SHA1アルゴリズムを使用してbyte配列や整数のリスト、文字列 (システムのデフォルトエンコーディング) のダイジェスト値を計算し、小文字16進数表記の文字列にエンコードします。使用例を以下に示します:

{code:java}
Your API Key: ${user.uniqueID.encodeAsSHA1()}
{code}

{hidden}*SHA1BytesCodec*{hidden}
*SHA1BytesCodec*

{hidden}Uses the SHA1 algorithm to digest byte arrays or lists of integers, or the bytes of a string (in default system encoding), as a byte array. Example of usage:{hidden}
SHA1アルゴリズムを使用してbyte配列や整数のリスト、文字列 (システムのデフォルトエンコーディング) のダイジェスト値を計算し、byte配列にエンコードします。使用例を以下に示します:

{code:java}
byte[] passwordHash = params.password.encodeAsSHA1Bytes()
{code}

{hidden}*SHA256Codec*{hidden}
*SHA256Codec*

{hidden}Uses the SHA256 algorithm to digest byte arrays or lists of integers, or the bytes of a string (in default system encoding), as a lowercase hexadecimal string. Example of usage:{hidden}
SHA256アルゴリズムを使用してbyte配列や整数のリスト、文字列 (システムのデフォルトエンコーディング) のダイジェスト値を計算し、小文字16進数表記の文字列にエンコードします。使用例を以下に示します:

{code:java}
Your API Key: ${user.uniqueID.encodeAsSHA256()}
{code}

{hidden}*SHA256BytesCodec*{hidden}
*SHA256BytesCodec*

{hidden}Uses the SHA256 algorithm to digest byte arrays or lists of integers, or the bytes of a string (in default system encoding), as a byte array. Example of usage:{hidden}
SHA256アルゴリズムを使用してbyte配列や整数のリスト、文字列 (システムのデフォルトエンコーディング) のダイジェスト値を計算し、byte配列にエンコードします。使用例を以下に示します:

{code:java}
byte[] passwordHash = params.password.encodeAsSHA256Bytes()
{code}

{hidden}h4. Custom Codecs{hidden}
h4. カスタムコーデック

{hidden}Applications may define their own codecs and Grails will load them along with the standard codecs. A custom codec class must be defined in the @grails-app/utils/@ directory and the class name must end with @Codec@. The codec may contain a @static@ @encode@ closure, a @static@ @decode@ closure or both. The closure must accept a single argument which will be the object that the dynamic method was invoked on. For Example:{hidden}
アプリケーションで必要なコーデックを定義しておくと、Grailsは標準コーデックと同様にロードします。カスタムコーデックのクラスは@grails-app/utils/@ディレクトリ以下に配置され、かつ、クラス名は@Codec@で終わる必要があります。コーデックには@static@ @encode@クロージャと@static@ @decode@クロージャのいずれかまたは両方を定義することができます。これらのクロージャは、1引数 (動的なメソッドとして実行された際にエンコード/デコード対象のオブジェクトになります) を受け付ける必要があります。例えば、以下のように記述します:

{code:java}
class PigLatinCodec {
  static encode = { str ->
    // convert the string to pig latin and return the result
  }
}
{code}

{hidden}With the above codec in place an application could do something like this:{hidden}
上の例のようなコーデックが定義されているとき、アプリケーションから以下のように使用することができます:

{code:xml}
${lastName.encodeAsPigLatin()}
{code}
