{hidden}Grails has built in support for [Content negotiation|http://en.wikipedia.org/wiki/Content_negotiation] using either the HTTP @Accept@ header, an explicit format request parameter or the extension of a mapped URI.{hidden}
Grailsには、明示的なフォーマットに対するリクエストのHTTP @Accept@ヘッダーまたはマップされたURIの拡張子での[コンテントネゴシエーション|http://en.wikipedia.org/wiki/Content_negotiation]に対応しています。

h4. Mimeタイプの定義 {hidden}Configuring Mime Types{hidden}

{hidden}Before you can start dealing with content negotiation you need to tell Grails what content types you wish to support. By default Grails comes configured with a number of different content types within @grails-app/conf/Config.groovy@ using the @grails.mime.types@ setting: {hidden}
コンテントネゴシエーションの処理を行うには、どのコンテントタイプをサポートするかをGrailsに教える必要があります。@grails-app/conf/Config.groovy@の@grails.mime.types@設定に幾つかのコンテントタイプがデフォルトで定義されています:

{code:java}
grails.mime.types = [
    all:           '*/*',
    atom:          'application/atom+xml',
    css:           'text/css',
    csv:           'text/csv',
    form:          'application/x-www-form-urlencoded',
    html:          ['text/html','application/xhtml+xml'],
    js:            'text/javascript',
    json:          ['application/json', 'text/json'],
    multipartForm: 'multipart/form-data',
    rss:           'application/rss+xml',
    text:          'text/plain',
    hal:           ['application/hal+json','application/hal+xml'],
    xml:           ['text/xml', 'application/xml']
]
{code}

{hidden}The above bit of configuration allows Grails to detect to format of a request containing either the 'text/xml' or 'application/xml' media types as simply 'xml'. You can add your own types by simply adding new entries into the map.{hidden}
この設定の一部を説明すると、'text/xml'または'application/xml'を含むリクエストは単純にコンテントタイプ'xml'としてGrailsが検出するのを可能にします。独自のタイプを追加するには単純にマップにタイプを追加するだけです。

h4. Content Negotiation using the format parameter

Let's say a controller action can return a resource in a variety of formats: HTML, XML, and JSON. What format will the client get? The easiest and most reliable way for the client to control this is through a @format@ URL parameter.

So if you, as a browser or some other client, want a resource as XML, you can use a URL like this:

{code:java}
http://my.domain.org/books?format=xml
{code}

The result of this on the server side is a @format@ property on the @response@ object with the value @xml@ . You could code your controller action to return XML based on this property, but you can also make use of the controller-specific @withFormat()@ method:

{code:java}
import grails.converters.JSON
import grails.converters.XML

class BookController {

    def list() {
        def books = Book.list()

        withFormat {
            html bookList: books
            json { render books as JSON }
            xml { render books as XML }
        }
    }
}
{code}

In this example, Grails will only execute the block inside @withFormat()@ that matches the requested content type. So if the preferred format is @html@ then Grails will execute the @html()@ call only. Each 'block' can either be a map model for the corresponding view (as we are doing for 'html' in the above example) or a closure. The closure can contain any standard action code, for example it can return a model or render content directly.

There is a special format, "all", that is handled differently from the explicit formats. If "all" is specified (normally this happens through the Accept header - see below), then the first block of @withFormat()@ is executed. You should not add an explicit "all" block. In the above example, a format of "all" will trigger the @html@ handler.

{note}
When using [withFormat|controllers] make sure it is the last call in your controller action as the return value of the @withFormat@ method is used by the action to dictate what happens next.
{note}

h4. Acceptヘッダーを使用する {hidden}Using the Accept header {hidden}

Every incoming HTTP request has a special [Accept|http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html] header that defines what media types (or mime types) a client can "accept". In older browsers this is typically:

{code:java}
*/*
{code}

which simply means anything. However, newer browsers send more interesting values such as this one sent by Firefox:

{code}
text/xml, application/xml, application/xhtml+xml, text/html;q=0.9, \
    text/plain;q=0.8, image/png, */*;q=0.5
{code}

This particular accept header is unhelpful because it indicates that XML is the preferred response format whereas the user is really expecting HTML. That's why Grails ignores the accept header by default for browsers. However, non-browser clients are typically more specific in their requirements and can send accept headers such as

{code}
application/json
{code}

As mentioned the default configuration in Grails is to ignore the accept header for browsers. This is done by the configuration setting @grails.mime.disable.accept.header.userAgents@, which is configured to detect the major rendering engines and ignore their ACCEPT headers. This allows Grails' content negotiation to continue to work for non-browser clients:

{code}
grails.mime.disable.accept.header.userAgents = ['Gecko', 'WebKit', 'Presto', 'Trident']
{code}

For example, if it sees the accept header above ('application/json') it will set @format@ to @json@ as you'd expect. And of course this works with the @withFormat()@ method in just the same way as when the @format@ URL parameter is set (although the URL parameter takes precedence).

An accept header of '\*/\*' results in a value of @all@ for the @format@ property.


h4. リクエストフォーマット vs レスポンスフォーマット {hidden}Request format vs. Response format {hidden}

{hidden}As of Grails 2.0, there is a separate notion of the _request_ format and the _response_ format. The request format is dictated by the @CONTENT_TYPE@ header and is typically used to detect if the incoming request can be parsed into XML or JSON, whilst the response format uses the file extension, format parameter or ACCEPT header to attempt to deliver an appropriate response to the client.{hidden}
Grails 2.0からの対応で、リクエストフォーマットとレスポンスフォーマットでは分離して認識するようになりました。リクエストフォーマットは、@CONTENT_TYPE@ヘッダの指定で入ってくるリクエストを認識してXMLまたJSON等に分類します。レスポンスフォーマットでは、ファイル拡張子、フォーマットパラメータまたはACCEPTヘッダを認識して適したレスポンスをクライアントに返します。

{hidden}The [withFormat|controllers] available on controllers deals specifically with the response format. If you wish to add logic that deals with the request format then you can do so using a separate @withFormat@ method available on the request:{hidden}
コントローラでの[withFormat|controllers]はレスポンスフォーマット専用となります。リクエストフォーマットでロジックを記述する場合は、requestオブジェクトの@withFormat@メソッドを使用します:

{code:java}
request.withFormat {
    xml {
        // read XML
    }
    json {
        // read JSON
    }
}
{code}

h4. リクエストパラメータformatでのコンテントネゴシエーション {hidden}Content Negotiation with the format Request Parameter {hidden}

{hidden}If fiddling with request headers if not your favorite activity you can override the format used by specifying a @format@ request parameter:{hidden}
リクエストヘッダを参照した方法を行いたく無い場合は、フォーマットを指定するために、リクエストパラメータの@format@が使用できます:

{code:java}
/book/list?format=xml
{code}

{hidden}You can also define this parameter in the [URL Mappings|guide:urlmappings] definition:{hidden}
このパラメータは[URLマッピング|guide:urlmappings]でも定義できます:

{code:java}
"/book/list"(controller:"book", action:"list") {
    format = "xml"
}
{code}

h4. URI拡張子でのコンテントネゴシエーション {hidden}Content Negotiation with URI Extensions {hidden}

{hidden}Grails also supports content negotiation using URI extensions. For example given the following URI:{hidden}
URI拡張子でのコンテントネゴシエーションにも対応しています。例として次のようなURIがあるとします:

{code:java}
/book/list.xml
{code}

This works as a result of the default URL Mapping definition which is:

{code:java}
"/$controller/$action?/$id?(.${format})?"{
{code}

Note the inclusion of the @format@ variable in the path. If you do not wish to use content negotiation via the file extension then simply remove this part of the URL mapping:

{code:java}
"/$controller/$action?/$id?"{
{code}


h4. コンテントネゴシエーションをテスト {hidden}Testing Content Negotiation {hidden}

{hidden}To test content negotiation in a unit or integration test (see the section on [Testing|guide:testing]) you can either manipulate the incoming request headers:{hidden}
ユニットテストまたは統合テスト([テスト|guide:testing]のセクションを参照)でコンテントネゴシエーションをテストする際に、入ってくるリクエストヘッダを操作することができます:

{code:java}
void testJavascriptOutput() {
    def controller = new TestController()
    controller.request.addHeader "Accept",
              "text/javascript, text/html, application/xml, text/xml, */*"

    controller.testAction()
    assertEquals "alert('hello')", controller.response.contentAsString
}
{code}

{hidden}Or you can set the format parameter to achieve a similar effect:{hidden}
または、formatパラメータをセットすることが可能です:

{code:java}
void testJavascriptOutput() {
    def controller = new TestController()
    controller.params.format = 'js'

    controller.testAction()
    assertEquals "alert('hello')", controller.response.contentAsString
}
{code}
