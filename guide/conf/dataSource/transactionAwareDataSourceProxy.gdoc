{hidden}The actual @dataSource@ bean is wrapped in a transaction-aware proxy so you will be given the connection that's being used by the current transaction or Hibernate @Session@ if one is active.{hidden}
実際の@dataSource@ビーンはトランザクション対応のプロキシでラップされているため、それらが開始されているのであれば、現在のトランザクションやHibernateセッションで使われているコネクションが得られます。

{hidden}If this were not the case, then retrieving a connection from the @dataSource@ would be a new connection, and you wouldn't be able to see changes that haven't been committed yet (assuming you have a sensible transaction isolation setting, e.g. @READ_COMMITTED@ or better).{hidden}
もし@dataSource@としてトランザクション対応のプロキシを使っていなかったとしたら、その@dataSource@から取得したコネクションは新規コネクションであり、(@READ_COMMITTED@やより上位の適切なトランザクション分離が設定されていると仮定すれば)まだコミットされていない変更はみえないことでしょう。

　{hidden}The "real" unproxied @dataSource@ is still available to you if you need access to it; its bean name is @dataSourceUnproxied@.{hidden}
もしプロキシではない「素」の@dataSource@にアクセスする必要があるなら、@dataSourceUnproxied@というビーン名を使って利用できます。

{hidden}You can access this bean like any other Spring bean, i.e. using dependency injection:{hidden}
他のSpringビーンのように依存性注入を利用するなどして、ビーンにアクセスできます。

{code}
class MyService {

   def dataSourceUnproxied
   ...
}
{code}

{hidden}or by pulling it from the @ApplicationContext@:{hidden}
または@ApplicationContext@から取得できます。

{code}
def dataSourceUnproxied = ctx.dataSourceUnproxied
{code}
