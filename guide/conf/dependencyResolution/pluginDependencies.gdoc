{hidden}You can declaratively specify plugins as dependencies via the dependency DSL instead of using the [install-plugin|commandLine] command:{hidden}
[install-plugin|commandLine]コマンドを使用する代わりに依存関係DSLクエリー言語を用いることで依存するプラグインを指定できます:

{code}
grails.project.dependency.resolution = {
    ...
    repositories {
        ...
    }

    plugins {
        runtime ':hibernate:1.2.1'
    }

    dependencies {
        ...
    }
    ...
}
{code}

{hidden}If you don't specify a group id the default plugin group id of @org.grails.plugins@ is used. {hidden}
グループIDを指定しない場合、デフォルトのプラグインのグループIDである@org.grails.plugins@が使用されます。

{hidden}h4. Latest Integration{hidden}
h4. Latest Integrationラベル

{hidden}
{warning}
Only the Ivy dependency manager supports the "latest.integration" version. For Aether you can achieve a similar effect with version ranges.
{warning}
{hidden}

{warning}
Ivy依存関係マネージャは"latest.integration"バージョンをサポートしています。Aetherの場合は、バージョンの範囲指定で同様の効果を得ることができます。
{warning}

{hidden}You can specify to use the latest version of a particular plugin by using "latest.integration" as the version number:{hidden}
バージョン番号として "latest.integration"を使用することで、特定のプラグインの最新バージョンを使用するように指定できます:

{code}
plugins {
    runtime ':hibernate:latest.integration'
}
{code}

{hidden}h4. Integration vs. Release{hidden}
h4. Integrationラベル vs. Releaseラベル

{hidden}The "latest.integration" version label will also include resolving snapshot versions. To not include snapshot versions then use the "latest.release" label:{hidden}
"latest.integration"ラベルはスナップショットのバージョンも含まれます。スナップショットのバージョンが含まれないようにするには、 "latest.release"ラベルを使用します。

{code}
plugins {
    runtime ':hibernate:latest.release'
}
{code}

{hidden}
{note}
The "latest.release" label only works with Maven compatible repositories. If you have a regular SVN-based Grails repository then you should use "latest.integration".
{note}
{hidden}

{note}
"latest.release"ラベルはMavenの互換リポジトリでのみ動作します。通常のSVNベースのGrailsリポジトリの場合は、"latest.integration"を使用する必要があります。
{note}

{hidden}And of course if you use a Maven repository with an alternative group id you can specify a group id:{hidden}
もちろん、別のグループIDでMavenのリポジトリを使用する場合は、グループIDを指定することができます:

{code}
plugins {
    runtime 'mycompany:hibernate:latest.integration'
}
{code}

{hidden}h4. Plugin Exclusions{hidden}
h4. プラグインの除外

{hidden}You can control how plugins transitively resolves both plugin and JAR dependencies using exclusions. For example:{hidden}
excludesメソッドを使用して、プラグインおよびJARの依存関係を推移的に解決する方法を制御できます。以下に例を示します:

{code}
plugins {
    runtime(':weceem:0.8') {
        excludes "searchable"
    }
}
{code}

{hidden}Here we have defined a dependency on the "weceem" plugin which transitively depends on the "searchable" plugin. By using the @excludes@ method you can tell Grails _not_ to transitively install the searchable plugin. You can combine this technique to specify an alternative version of a plugin:{hidden}
ここでは、推移的に"searchable"プラグインに依存する"weceem"プラグインへの依存関係を定義しました。@excludes@メソッドを使用することで、Grailsにsearchableプラグインを推移的にインストール_しない_ことを教えることができます。あわせて、プラグインの代替バージョンを指定することもできます:

{code}
plugins {
    runtime(':weceem:0.8') {
        excludes "searchable" // excludes most recent version
    }
    runtime ':searchable:0.5.4' // specifies a fixed searchable version
}
{code}

{hidden}You can also completely disable transitive plugin installs, in which case no transitive dependencies will be resolved:{hidden}
推移的なプラグインのインストールを完全に無効にすることもでき、その場合、いかなる推移的な依存関係も解決されません:

{code}
plugins {
    runtime(':weceem:0.8') {
        transitive = false
    }
    runtime ':searchable:0.5.4' // specifies a fixed searchable version
}
{code}
