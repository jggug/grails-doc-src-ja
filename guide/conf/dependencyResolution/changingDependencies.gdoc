{hidden}h4. Configuration Changing dependencies{hidden}
h4. 変化する依存関係の設定

{hidden}Typically, dependencies are constant. That is, for a given combination of @group@, @name@ and @version@ the jar (or plugin) that it refers to will never change. The Grails dependency management system uses this fact to cache dependencies in order to avoid having to download them from the source repository each time. Sometimes this is not desirable. For example, many developers use the convention of a _snapshot_ (i.e. a dependency with a version number ending in “-SNAPSHOT”) that can change from time to time while still retaining the same version number. We call this a "changing dependency".{hidden}
基本的に、依存関係は不変です。ここでの不変とは、ある特定の@グループ@、@名前@、@バージョン@の組み合わせが参照するjar（もしくはプラグイン）は変化することはない、ということです。これによりGrailsの依存関係管理システムは、ソースリポジトリから毎回ダウンロードすることを回避するために、依存関係をキャッシュできます。時に、この仕様には不都合が生じます。例えば、多くの開発者は慣習的にスナップショット（つまり、バージョン番号が”-SNAPSHOT”で終わる依存関係）を使っています。このスナップショットは同一のバージョン番号を保持しつつ、変更される可能性があります。このことは”変化する依存関係”と呼ばれています。

{hidden}Whenever you have a changing dependency, Grails will always check the remote repository for a new version. More specifically, when a changing dependency is encountered during dependency resolution its last modified timestamp in the local cache is compared against the last modified timestamp in the dependency repositories. If the version on the remote server is deemed to be newer than the version in the local cache, the new version will be downloaded and used.{hidden}
変化する依存関係を持っている場合は必ず、Grailsは新しいバージョンのリモートリポジトリをチェックします。具体的には、依存関係の解決中に変化する依存関係に遭遇した場合、ローカルキャッシュの最終更新日時と依存関係のリポジトリの最終更新日時と比較します。リモートサーバ上のバージョンがローカルキャッシュ内のバージョンよりも新しい場合は、新しいバージョンがダウンロードされ使用されます。

{hidden}
{note}
Be sure to read the next section on “Dependency Resolution Caching” in addition to this one as it affects changing dependencies.
{note}
{hidden}

{note}
変化する依存関係に作用する、依存関係解決キャッシングについて、次のセクションを必ずお読みください。
{note}

{hidden}All dependencies (jars and plugins) with a version number ending in @-SNAPSHOT@ are *implicitly* considered to be changing by Grails. You can also explicitly specify that a dependency is changing by setting the changing flag in the dependency DSL (This is only required for Ivy, Aether does not support the 'changing' flag and treats dependencies that end with -SNAPSHOT as changing):{hidden}
Grailsは@暗黙的に@バージョン番号が@-SNAPSHOT@で終わるすべての依存関係（jarファイルもしくはプラグイン）を、変化する依存関係として扱います。また、明示的に依存DSLクエリー言語に変更フラグを設定することでも、変化する依存関係として扱う事ができます。（このDSLクエリー言語はIvyにのみ必要です。Aetherは'changing'フラグをサポートしておらず、-SNAPSHOTで終わる場合は変化する依存関係として扱います）

{code}
runtime ('org.my:lib:1.2.3') {
    changing = true
}
{code}

{hidden}
h4. Aether and SNAPSHOT dependencies
{hidden}
h4. AetherとSNAPSHOTの依存関係

{hidden}
The semantics for handling snapshots when using Aether in Grails are the same as those when using the Maven build tool. The default snapshot check policy is to check once a day for a new version of the dependency. This means that if a new snapshot is published during the day to a remote repository you may not see that change unless you manually clear out your local snapshot.
{hidden}
Grails内でAetherを使用した場合、スナップショットを処理するためのセマンティクスは、Mavenを使用した場合と同じです。
デフォルトのスナップショットのチェックポリシーでは、1日に1回、依存関係の新しいバージョンをチェックします。
これはその日リモートリポジトリに公開された新たなスナップショットが、手動でロカールリポジトリのスナップショットをクリアしない限り、変更を検知できない場合があるということです。

{hidden}
If you wish to change the snapshot update policy you can do so by configuring an @updatePolicy@ for the repository where the snapshot was resolved from, for example:
{hidden}
もし、スナップショットのアップデートポリシーを変更したい場合は、スナップショットの依存を解決するリポジトリで@updatePolicy@を設定します。
例えば以下のようにします:

{code}
repositories {
    mavenCentral {
        updatePolicy "interval:1"
    }
}
{code}

{hidden}
The above example configures an update policy that checks once a minute for changes. Note that that an @updatePolicy@ like the above will seriously impact performance of dependency resolution. The possibly configuration values for @updatePolicy@ are as follows:
{hidden}
上記の例では、1分に1回チェックをするアップデートポリシーを設定しています。
上記の@updatePolicy@のように、この設定は依存関係解決のパフォーマンスに影響を与えることに注意してください。
@updatePolicy@に設定が可能な値は以下のとおりです:

{hidden}
* @never@ - Never check for new snapshots
* @always@ - Always check for new snapshots
* @daily@ - Check once a day for new snapshots (the default)
* @interval:x@ - Check once every x minutes for new snapshots
{hidden}
* @never@ - 新しいスナップショットをチェックしない
* @always@ - 常に新しいスナップショットをチェックする
* @daily@ - 1日に1回新しいスナップショットをチェックする (デフォルト)
* @interval:x@ - x分ごとに1回新しいスナップショットをチェックする

{hidden}h4. Ivy and Changing dependencies{hidden}
h4. Ivyと変化する依存関係

{hidden}For those used to Maven snapshot handling, if you use Aether dependency management you can expect the same semantics as Maven. If you choose to use Ivy there is a caveat to the support for changing dependencies that you should be aware of. Ivy will stop looking for newer versions of a dependency once it finds a remote repository that has the dependency.{hidden}
Mavenのスナップショットの処理に使用されているものについては、Aetherの依存関係管理を使用する場合は、Mavenと同じセマンティクスを期待できます。Ivyを選択した場合は、変化する依存関係のサポートに対する注意があります。Ivyは依存関係を持つリモートリポジトリが見つかった時点で、新しいバージョンの依存関係の検索を終了します。

{hidden}Consider the following setup:{hidden}
以下の設定を考えてみましょう:

{code}
grails.project.dependency.resolution = {
    repositories {
        mavenLocal()
        mavenRepo "http://my.org/repo"
    }
    dependencies {
        compile "myorg:mylib:1.0-SNAPSHOT"
    }
{code}

{hidden}In this example we are using the local maven repository and a remote network maven repository. Assuming that the local OI dependency and the local Maven cache do not contain the dependency but the remote repository does, when we perform dependency resolution the following actions will occur:{hidden}
この例では、MavenのローカルリポジトリとMavenのリモートネットワークリポジトリを使用しています。ローカルにあるGrailsの依存関係とMavenのキャッシュには該当する依存関係が含まれていませんが、リモートリポジトリには含まれているとします。この状況で依存関係を解決する場合は、次のように動作します。

{hidden}* maven local repository is searched, dependency not found{hidden}
* Mavenのローカルリポジトリが検索されますが、依存関係は見つかりません。
{hidden}* maven network repository is searched, dependency is downloaded to the cache and used{hidden}
* Mavenのネットワークリポジトリが検索され、依存関係をキャッシュへダウンロードして使用します。

{hidden}Note that the repositories are checked in the order they are defined in the @BuildConfig.groovy@ file. {hidden}
リポジトリは@BuildConfig.groovy@のファイルに定義されている順にチェックされることに注意してください。

{hidden}If we perform dependency resolution again without the dependency changing on the remote server, the following will happen:{hidden}
リモートサーバー上の依存関係が変化していない状況で、再び依存関係解決を行う場合、次の処理が実行されます。

{hidden}* maven local repository is searched, dependency not found{hidden}
* Mavenのローカルリポジトリが検索されますが、依存関係は見つかりません。
{hidden}* maven network repository is searched, dependency is found to be the same “age” as the version in the cache so will not be updated (i.e. downloaded){hidden}
* Mavenのネットワークリポジトリが検索され依存関係が見つかりますが、キャッシュ内のバージョンと同じ最終更新日時のため更新（すなわちダウンロード）はされません。

{hidden}Later on, a new version of @mylib 1.0-SNAPSHOT@ is published changing the version on the server. The next time we perform dependency resolution, the following will happen:{hidden}
その後、@mylib 1.0-SNAPSHOT@の新しいバージョンが公開され、サーバ上のファイルが更新されたとします。この状況で依存関係の解決を実行した場合、以下の処理が行われます。

{hidden}* maven local repository is searched, dependency not found{hidden}
* Mavenのローカルリポジトリが検索されますが、依存関係は見つかりません。
{hidden}* maven network repository is searched, dependency is found to newer than version in the cache so will be updated (i.e. downloaded to the cache){hidden}
* Mavenのネットワークリポジトリが検索され、キャッシュ内のバージョンよりも新しい依存関係が見つかり、更新（つまり、キャッシュにダウンロード）されます。

{hidden}So far everything is working well.{hidden}
ここまで、すべてが正常に機能しています。

{hidden}Now we want to test some local changes to the @mylib@ library. To do this we build it locally and install it to the local Maven cache (how doesn't particularly matter). The next time we perform a dependency resolution, the following will occur:{hidden}
ここで、@mylib@ライブラリのローカル上での変更をテストしたい場合を考えてみます。これを行うには、ライブラリをローカル上でビルドし、Mavenのローカルキャッシュにインストールします（方法は特に重要ではありません）。この状況で、依存関係の解決を実行した場合、以下のようになります。

{hidden}* maven local repository is searched, dependency is found to newer than version in the cache so will be updated (i.e. downloaded to the cache){hidden}
Mavenのローカルリポジトリが検索され、キャッシュ内のバージョンよりも新しい依存関係が見つかるため、更新（つまり、キャッシュにダウンロード）されます。
{hidden}* maven network repository is NOT searched as we've already found the dependency{hidden}
すでに依存関係を発見したため、Mavenのネットワークリポジトリは検索されません。

{hidden}This is what we wanted to occur. {hidden}
これは、期待通りの結果です。

{hidden}Later on, a new version of @mylib 1.0-SNAPSHOT@ is published changing the version on the server. The next time we perform dependency resolution, the following will happen:{hidden}
その後、@mylib 1.0-SNAPSHOT@の新しいバージョンが公開され、サーバ上のファイルが更新されたとします。この状況で依存関係の解決を実行した場合、以下の処理が行われます。

{hidden}* maven local repository is searched, dependency is found to be the same “age” as the version in the cache so will not be updated (i.e. downloaded){hidden}
* Mavenのローカルリポジトリが検索され、キャッシュ内バージョンと同じ”年齢”の依存関係が見つかりますが、更新（すなわちダウンロード）はされません。
{hidden}* maven network repository is NOT searched as we've already found the dependency{hidden}
* すでに依存関係を発見したため、Mavenのネットワークリポジトリは検索されません。

{hidden}This is likely to not be the desired outcome. We are now out of sync with the latest published snapshot and will continue to keep using the version from the local maven repository.{hidden}
これは望ましい結果ではない可能性があります。最新の公開された（ネットワークリポジトリの）スナップショットと同期をとらず、Mavenのローカルリポジトリのバージョンを使用し続けます。

{hidden}The rule to remember is this: when resolving a dependency, Ivy will stop searching as soon as it finds a repository that has the dependency at the specified version number. It will *not* continue searching all repositories trying to find a more recently modified instance.{hidden}
覚えておくべきルール:依存関係を解決するときに、Grailsはできるだけ早く、バージョン番号の指定された依存関係を持つリポジトリを見つけ、検索を終了します。より最新のインスタンスを検索するためにすべてのリポジトリを検索し続けることは@しません@。

{hidden}To remedy this situation (i.e. build against the _newer_ version of @mylib 1.0-SNAPSHOT@ in the remote repository), you can either:{hidden}
この状況を改善するために（すなわちリモートリポジトリ内の、より新しいバージョンの@mylib 1.0-SNAPSHOT@をビルドするために）、次のいずれかを実行できます。

{hidden}* Delete the version from the local maven repository, or{hidden}
* Mavenのローカルリポジトリからバージョンを削除する

{hidden}* Reorder the repositories in the @BuildConfig.groovy@ file{hidden}
* @BuildConfig.groovy@ファイル内のリポジトリの順序を変更する

{hidden}Where possible, prefer deleting the version from the local maven repository. In general, when you have finished building against a locally built SNAPSHOT always try to clear it from the local maven repository.{hidden}
可能であれば、Mavenのローカルリポジトリからバージョンを削除することが望ましいでしょう。通常は、ローカルスナップショットのビルドが終了したら、常にMavenのローカルリポジトリからクリアしましょう。

{hidden}
{note}
This changing dependency behaviour is an unmodifiable characteristic of the underlying dependency management system Apache Ivy. It is currently not possible to have Ivy search all repositories to look for newer versions (in terms of modification date) of the same dependency (i.e. the same combination of @group@, @name@ and @version@). If you want this behavior consider switching to Aether as the dependency manager.
{note}
{hidden}

{note}
この変化する依存関係の挙動は、Grailsの依存関係管理システムの基礎となっているApache Ivyの変更不可能な特性です。現在のところIvyは、すべてのリポジトリを検索し、同じ依存関係（すなわち等しい@グループ@、@名前@、@バージョン@の組み合わせ）の中から（修正日付の面で）より新しいバージョンのものを探すことはできません。
{note}
