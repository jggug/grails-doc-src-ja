{hidden}Since Grails is built on Java technology setting up a data source requires some knowledge of JDBC (the technology that doesn't stand for Java Database Connectivity).{hidden}
Grailsはデータソースの設定がJava技術で構築されているため、ある程度JDBC（Java DataBase Connectivityの略ではない）の知識が必要になります。

{hidden}
If you use a database other than H2 you need a JDBC driver. For example for MySQL you would need "Connector/J":http://www.mysql.com/downloads/connector/j/
{hidden}
もしH2以外のデータベースを使うなら、JDBCドライバが必要になります。例えばMySQLであれば"Connector/J":http://www.mysql.com/downloads/connector/j/ が必要になります。

{hidden}Drivers typically come in the form of a JAR archive. It's best to use Ivy to resolve the jar if it's available in a Maven repository, for example you could add a dependency for the MySQL driver like this:{hidden}
ドライバは、一般的にはJAR形式で提供されています。もしIvyが使える場合は、Mavenリポジトリからjarを取得するのがよいでしょう。例えば、このようにMySQLの依存関係を加えることができます。

{code}
grails.project.dependency.resolution = {
    inherits("global")
    log "warn"
    repositories {
        grailsPlugins()
        grailsHome()
        grailsCentral()
        mavenCentral()
    }
    dependencies {
        runtime 'mysql:mysql-connector-java:5.1.16'
    }
}
{code}

{hidden}Note that the built-in @mavenCentral()@ repository is included here since that's a reliable location for this library.{hidden}
@mavenCentral()@リポジトリが記述されているのは、このライブラリの取得元として信頼できる場所だからです。

{hidden}If you can't use Ivy then just put the JAR in your project's @lib@ directory.{hidden}
Ivyが使えない場合は、プロジェクトの@lib@ディレクトリにJARを置いてください。

{hidden}Once you have the JAR resolved you need to get familiar Grails' DataSource descriptor file located at @grails-app/conf/DataSource.groovy@. This file contains the dataSource definition which includes the following settings:{hidden}
JARが解決できたら、@grails-app/conf/DataSource.groovy@ファイルで使用する、Grailsにおけるデータソースの定義方法を覚える必要があります。このファイルはデータソースの定義として、以下の項目を含んでいます。

{hidden}* @driverClassName@ - The class name of the JDBC driver
* @username@ - The username used to establish a JDBC connection
* @password@ - The password used to establish a JDBC connection
* @url@ - The JDBC URL of the database
* @dbCreate@ - Whether to auto-generate the database from the domain model - one of 'create-drop', 'create', 'update' or 'validate'
* @pooled@ - Whether to use a pool of connections (defaults to true)
* @logSql@ - Enable SQL logging to stdout
* @formatSql@ - Format logged SQL
* @dialect@ - A String or Class that represents the Hibernate dialect used to communicate with the database. See the [org.hibernate.dialect|http://docs.jboss.org/hibernate/core/3.6/javadocs/org/hibernate/dialect/package-summary.html] package for available dialects.
* @readOnly@ - If @true@ makes the DataSource read-only, which results in the connection pool calling @setReadOnly(true)@ on each @Connection@
* @properties@ - Extra properties to set on the DataSource bean. See the [Commons DBCP BasicDataSource|http://commons.apache.org/dbcp/api-1.2.2/org/apache/commons/dbcp/BasicDataSource.html] documentation.{hidden}

* @driverClassName@ - JDBCドライバのクラス名
* @username@ - JDBCコネクションの接続に使用するユーザ名
* @password@ - JDBCコネクションの接続に使用するパスワード
* @url@ - データベースのJDBC URL
* @dbCreate@ -  ドメインモデルからデータベースを自動で生成するか。'create-drop'、'create'、'update'、もしくは'validate'の中から1つ指定
* @pooled@ - コネクションプールを使うか（デフォルトではtrue)
* @logSql@ - 標準出力へのSQLロギングを有効にするか
* @formatSql@ - SQLログをフォーマットするか
* @dialect@ - データベースの通信に使用されるHibernateの方言を表す文字型かクラス。利用できる方言は[org.hibernate.dialect|http://docs.jboss.org/hibernate/core/3.6/javadocs/org/hibernate/dialect/package-summary.html]パッケージを参照
* @readOnly@ - @true@にした場合は読み取り専用のデータソースとなり、各@Connection@で@setReadOnly(true)@がコネクションプールより呼ばれる 
* @properties@ - DataSourceビーンを設定するための追加プロパティ。[Commons DBCP BasicDataSource|http://commons.apache.org/dbcp/api-1.2.2/org/apache/commons/dbcp/BasicDataSource.html]ドキュメント参照

{hidden}A typical configuration for MySQL may be something like:{hidden}
MySQLの一般的な構成はおおむね以下のようになります。

{code:java}
dataSource {
    pooled = true
    dbCreate = "update"
    url = "jdbc:mysql://localhost/yourDB"
    driverClassName = "com.mysql.jdbc.Driver"
    dialect = org.hibernate.dialect.MySQL5InnoDBDialect
    username = "yourUser"
    password = "yourPassword"
}
{code}

{hidden}{warning}
When configuring the DataSource do not include the type or the def keyword before any of the configuration settings as Groovy will treat these as local variable definitions and they will not be processed. For example the following is invalid:
{warning}{hidden}
データソースを設定する際、設定値の前には型やdefキーワードは含まれません。キーワードが含まれる場合はGroovyのローカル変数として処理されます。例えば、以下の記述では設定値としては無効になります。

{code:java}
dataSource {
    boolean pooled = true // type declaration results in ignored local variable
    ...
}
{code}

{hidden}Example of advanced configuration using extra properties:{hidden}
追加プロパティを使い、高度な設定を行う例は以下になります。
{code:java}
dataSource {
    pooled = true
    dbCreate = "update"
    url = "jdbc:mysql://localhost/yourDB"
    driverClassName = "com.mysql.jdbc.Driver"
    dialect = org.hibernate.dialect.MySQL5InnoDBDialect
    username = "yourUser"
    password = "yourPassword"
    properties {
        maxActive = 50
        maxIdle = 25
        minIdle = 5
        initialSize = 5
        minEvictableIdleTimeMillis = 60000
        timeBetweenEvictionRunsMillis = 60000
        maxWait = 10000
        validationQuery = "/* ping */"
    }
}
{code}

{hidden}h4. More on dbCreate{hidden}
h4. dbCreateの詳細

{hidden}Hibernate can automatically create the database tables required for your domain model. You have some control over when and how it does this through the @dbCreate@ property, which can take these values:{hidden}
Hibernateは自動的にドメインモデルに必要なデータベーステーブルを作成することができます。ユーザは@dbCreate@プロパティを使い、どのようにテーブルの作成を行うのかコントロールすることができ、以下のような値を取ることができます。

{hidden}* *create* - Drops the existing schemaCreates the schema on startup, dropping existing tables, indexes, etc. first.
* *create-drop* - Same as *create*, but also drops the tables when the application shuts down cleanly.
* *update* - Creates missing tables and indexes, and updates the current schema without dropping any tables or data. Note that this can't properly handle many schema changes like column renames (you're left with the old column containing the existing data).
* *validate* - Makes no changes to your database. Compares the configuration with the existing database schema and reports warnings.
* any other value - does nothing{hidden}

* *create* - 起動時に既存のテーブルやインデックスなどを削除することで、既存のスキーマを削除する
* *create-drop* - *create*と同じだが、アプリケーションを停止させた時にテーブルを削除する
* *update* - テーブルやデータなどを削除することなく、現在のスキーマを更新する形で存在しないテーブルやインデックスを作成する。これはカラムのリネームのような多くのスキーマ変更を正確に処理できないことに注意してください（既存のデータを含む、古い列が残ってしまう）
* *validate* - データベースは変更されません。既存のデータベースとスキーマを比較し、警告を出します
* any other value - 何もしません

{hidden}You can also remove the @dbCreate@ setting completely, which is recommended once your schema is relatively stable and definitely when your application and database are deployed in production. Database changes are then managed through proper migrations, either with SQL scripts or a migration tool like [Liquibase|http://www.liquibase.org/] (the "Database Migration":http://grails.org/plugin/database-migration plugin uses Liquibase and is tightly integrated with Grails and GORM).{hidden}
@dbCreate@設定を完全に削除することもできます。それは、アプリケーションとデータベースが本番環境にデプロイされている場合、スキーマが比較的安定してきた段階で推奨されています。データベースの変更は、SQLスクリプトや[Liquibase|http://www.liquibase.org/]のようなマイグレーションツールのどちらかで、適切にマイグレーションを管理してください。（"Database Migration":http://grails.org/plugin/database-migration プラグインはLiquibaseを使用し、GrailsやGORMと統合されます。）
