{hidden}
Grails' command line system is built on [Gant|http://gant.codehaus.org/] - a simple Groovy wrapper around [Apache Ant|http://ant.apache.org].
{hidden}
Grailsのコマンドラインシステムは[Gant|http://gant.codehaus.org/](シンプルな[Apache Ant|http://ant.apache.org]のGroovyによるラッパー)によって構築されています。

{hidden}However, Grails takes it further through the use of convention and the @grails@ command. When you type:{hidden}
Grailsでは@grails@コマンドを使用し、Gantとは少し違った実行方法になります。

{code}
grails [command name]
{code}

{hidden}Grails searches in the following directories for Gant scripts to execute:{hidden}
このように入力した場合、GrailsはGantスクリプトを実行するために以下のディレクトリを探しに行きます。

* @USER_HOME/.grails/scripts@
* @PROJECT_HOME/scripts@
* @PROJECT_HOME/plugins/*/scripts@
* @GRAILS_HOME/scripts@

{hidden}Grails will also convert command names that are in lower case form such as run-app into camel case. So typing {hidden}
Grailsは "run-app" のような小文字のコマンドをキャメルケースに変換して探します。なので次のように入力すると:

{code}
grails run-app
{code}

{hidden}Results in a search for the following files:{hidden}
結果、以下のファイルを検索するよう指定したことになります。

* @USER_HOME/.grails/scripts/RunApp.groovy@
* @PROJECT_HOME/scripts/RunApp.groovy@
* @PLUGINS_HOME/*/scripts/RunApp.groovy@
* @GLOBAL_PLUGINS_HOME/*/scripts/RunApp.groovy@
* @GRAILS_HOME/scripts/RunApp.groovy@

{hidden}If multiple matches are found Grails will give you a choice of which one to execute.{hidden}
もし、複数の結果が見つかった場合はGrailsはどれを実行するかの選択肢を提示してきます。

{hidden}When Grails executes a Gant script, it invokes the "default" target defined in that script. If there is no default, Grails will quit with an error.{hidden}
GrailsがGantスクリプトを実行するとき、デフォルトとして設定されたターゲットを起動します。デフォルト指定（setDefaultTarget(main)など）がない場合、Grailsはエラーで終了します。

{hidden}To get a list of all commands and some help about the available commands type:{hidden}
実行可能なコマンドのヘルプとリストを表示したい場合は以下を入力します:

{code}
grails help
{code}

{hidden}which outputs usage instructions and the list of commands Grails is aware of:{hidden}
このように入力すると、Grailsが認識しているコマンドのリストと使用方法が出力されます:

{code}
Usage (optionals marked with *):
grails [environment]* [target] [arguments]*

Examples:
grails dev run-app
grails create-app books

Available Targets (type grails help 'target-name' for more info):
grails bootstrap
grails bug-report
grails clean
grails compile
...
{code}

{note}
{hidden}Refer to the Command Line reference in the Quick Reference menu of the reference guide for more information about individual commands {hidden}
左メニューにある個別のコマンドラインリファレンス情報も参照して下さい。
{note}

{hidden}It's often useful to provide custom arguments to the JVM when running Grails commands, in particular with @run-app@ where you may for example want to set a higher maximum heap size. The Grails command will use any JVM options provided in the general @JAVA_OPTS@ environment variable, but you can also specify a Grails-specific environment variable too:{hidden}
Grailsコマンドを実行する際に、JVMへ独自の引数を提供できると便利な場合があります。
例えば、@run-app@をする際にヒープサイズにより大きな値を設定したいといった場合です。
Grailsコマンドは一般的な@JAVA_OPTS@の環境変数内で提供されているJVMオプションを使用しますが、Grails固有の環境変数を指定することもできます:

{code}
export GRAILS_OPTS="-Xmx1G -Xms256m -XX:MaxPermSize=256m"
grails run-app
{code}

{hidden}h4. non-interactive mode{hidden}
h4. 非インタラクティブモード

{hidden}When you run a script manually and it prompts you for information, you can answer the questions and continue running the script. But when you run a script as part of an automated process, for example a continuous integration build server, there's no way to "answer" the questions. So you can pass the @\-\-non-interactive@ switch to the script command to tell Grails to accept the default answer for any questions, for example whether to install a missing plugin.{hidden}
手動でスクリプト実行する際にユーザ入力を求める場合があります。
そのような場合は質問に応答することでスクリプトの実行が継続されます。
しかし、継続的インテグレーションのビルドサーバといったように、自動化されたプロセスとしてスクリプトを実行する場合は質問に応答する方法がありません。
例えば、未インストールのプラグインをインストールするかどうかといったような質問に対し、デフォルトの値で応答するようGrailsに伝えるには、そのスクリプトコマンドへ@\-\-non-interactive@を渡します。

{hidden}For example:{hidden}
例えば:

{code}
grails war --non-interactive
{code}
