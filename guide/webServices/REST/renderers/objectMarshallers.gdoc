{hidden}Grails' Converters feature the notion of an [ObjectMarshaller|api:org.codehaus.groovy.grails.web.converters.marshaller.ObjectMarshaller], and each type can have a registered @ObjectMarshaller@. You can register custom @ObjectMarshaller@ instances to completely customize response rendering. For example you can define the following in @BootStrap.init@:{hidden}
Grailsのコンバーターは、[オブジェクトマーシャラ|api:org.codehaus.groovy.grails.web.converters.marshaller.ObjectMarshaller]の概念を特徴としており、それぞれの型に対して@ObjectMarshaller@を登録できます。
そして、レスポンスのレンダリングをカスタマイズするためにカスタム@ObjectMarshaller@インタンスを登録できます。
例えば、@BootStrap.init@の中で以下のように定義できます:

{code}
XML.registerObjectMarshaller Book, { Book book, XML xml ->
  xml.attribute 'id', book.id
  xml.build {
    title(book.title)
  }
}
{code}

{hidden}You can customize the formatting of an indvidual value this way too. For example the [JodaTime plugin|http://grails.org/plugin/jodatime] does the following to support rendering of JodaTime dates in JSON output:{hidden}
個々の値のフォーマットをカスタマイズする場合もこの方法で可能です。
例えば、[JodaTime plugin|http://grails.org/plugin/jodatime]は、JSON出力でJadaTime日付のレンダリングをサポートするために次のようにしています:

{code}
JSON.registerObjectMarshaller(DateTime) {
    return it?.toString("yyyy-MM-dd'T'HH:mm:ss'Z'")
}
{code}

{hidden}In the case of JSON it often simple to use a map to customize output:{hidden}
JSONの場合は、マップを使って簡単に出力をカスタマイズできます:

{code}
JSON.registerObjectMarshaller(Book) {
  def map= [:]
  map['titl'] = it.title
  map['auth'] = it.author
  return map 
}
{code}

{hidden}h4. Registering Custom Marshallers via Spring{hidden}
h4. Spring経由でカスタムマーシャラを登録する

{hidden}Note that if you have many custom marshallers it is recommended you split the registration of these into a separate class:{hidden}
もし多くのカスタムマーシャラがある場合は、マーシャラの登録をそれぞれ別々のクラスへ分けることがお勧めです:

{code}
class CustomMarshallerRegistrar {

    @javax.annotation.PostConstruct
    void registerMarshallers() {
        JSON.registerObjectMarshaller(DateTime) {
            return it?.toString("yyyy-MM-dd'T'HH:mm:ss'Z'")
        }        
    }
}
{code}

{hidden}Then define this class as Spring bean in @grails-app/conf/spring/resources.groovy@:{hidden}
そして、このクラスを@grails-app/conf/spring/resources.groovy@内でSpringビーンとして定義します:

{code}
beans = {
    myCustomMarshallerRegistrar(CustomMarshallerRegistrar)
}
{code}

{hidden}The @PostConstruct@ annotation will get triggered on startup of your application.{hidden}
@PostConstruct@アノテーションはアプリケーション起動時に処理を起動するトリガーになります。
