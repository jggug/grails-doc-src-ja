{hidden}The easiest way to get started doing so is to create a new controller for your resource that extends the @grails.rest.RestfulController@ super class. For example:{hidden}
まず始めの簡単な方法は、@grails.rest.RestfulController@をスーパークラスとして、リソースに対して新たなコントローラを作成する方法です。
例えば:

{code}
class BookController extends RestfulController {
    static responseFormats = ['json', 'xml']
    BookController() {
        super(Book)
    }
}
{code}

{hidden}To customize any logic you can just override the appropriate action. The following table provides the names of the action names and the URIs they map to:{hidden}
ロジックをカスタマイズするには、カスタマイズが必要なアクションを上書きします。
以下のテーブルは、アクションの名前と、それに対応するURIです:

{table}
 HTTP Method | URI               | Controller Action
 GET         |/books             | index            
 GET         |/books/create      | create              
 POST        |/books             | save            
 GET         |/books/${id}       | show              
 GET         |/books/${id}/edit  | edit              
 PUT         |/books/${id}       | update           
 DELETE      |/books/${id}       | delete        
{table}

{hidden}{note}
Note that the @create@ and @edit@ actions are only needed if the controller exposes an HTML interface. 
{note}{hidden}
{note}
@create@と@edit@アクションは、コントローラがHTMLインタフェースを公開する場合にのみ必要です。
{note}

{hidden}As an example if you have a [nested resource|guide:restfulMappings] then you would typically want to query both the parent and the child identifiers. For example given the following URL mapping:{hidden}
例のように[ネストしたリソース|guide:restfulMappings]の場合、大抵は親と子供の識別子が必要になります。
例えば以下のようなURLマッピングの場合:

{code}
"/authors"(resources:'author') {
    "/books"(resources:'book')
}
{code}

{hidden}You could implement the nested controller as follows:{hidden}
次のように、ネストに対応したコントローラを実装できます:

{code}
class BookController extends RestfulController {
    static responseFormats = ['json', 'xml']
    BookController() {
        super(Book)
    }

    @Override
    Book queryForResource(Serializable id) {
        Book.where {
            id == id && author.id = params.authorId
        }.find()
    }

}
{code}

{hidden}The example above subclasses @RestfulController@ and overrides the @queryForResource@ method to customize the query for the resource to take into account the parent resource.{hidden}
上記の例では、@RestfulController@のサブクラスで親リソースに対応するため、@queryForResource@メソッドをオーバーライドしてリソースのクエリをカスタマイズしています。


