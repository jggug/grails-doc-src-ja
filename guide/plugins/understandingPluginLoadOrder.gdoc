{hidden}h4. Controlling Plugin Dependencies{hidden}

h4. プラグインの依存性制御

{hidden}Plugins often depend on the presence of other plugins and can adapt depending on the presence of others. This is implemented with two properties. The first is called @dependsOn@. For example, take a look at this snippet from the Hibernate plugin:{hidden}

プラグインはしばしば他のプラグインの存在に依存しますが、他のプラグインの存在についての依存性に適応することができます。これは2つのプロパティで行うことができます。1つ目は@dependsOn@というプロパティですが、Hibernateプラグインにある以下のコード断片を見て下さい:

{code:java}
class HibernateGrailsPlugin {

    def version = "1.0"

    def dependsOn = [dataSource: "1.0",
                     domainClass: "1.0",
                     i18n: "1.0",
                     core: "1.0"]
}
{code}

{hidden}The Hibernate plugin is dependent on the presence of four plugins: the @dataSource@, @domainClass@, @i18n@ and @core@ plugins.{hidden}

Hibernateプラグインは4つのプラグインに依存しています: @dataSource@、@domainClass@、@i18n@そして@core@プラグインです。

{hidden}The dependencies will be loaded before the Hibernate plugin and if all dependencies do not load, then the plugin will not load.{hidden}

依存しているプラグインは、Hibernateプラグインの前に読み込まれます。すべての依存プラグインがロードされなければ、プラグインはロードされません。

{hidden}The @dependsOn@ property also supports a mini expression language for specifying version ranges. A few examples of the syntax can be seen below:{hidden}

@dependsOn@プロパティはバージョン範囲を指定するためのミニ式言語をサポートしています。以下は例です：

{code:java}
def dependsOn = [foo: "* > 1.0"]
def dependsOn = [foo: "1.0 > 1.1"]
def dependsOn = [foo: "1.0 > *"]
{code}

{hidden}When the wildcard * character is used it denotes "any" version. The expression syntax also excludes any suffixes such as -BETA, -ALPHA etc. so for example the expression "1.0 > 1.1" would match any of the following versions:{hidden}

ワイルドカード文字*が任意のバージョンを表わすために使われます。また、この式のシンタックスは、「-BETA」や「-ALPHA」といった接尾辞を除外します。なので例えば「1.0 > 1.1」は以下のバージョンにマッチします。

* 1.1
* 1.0
* 1.0.1
* 1.0.3-SNAPSHOT
* 1.1-BETA2

{hidden}h4. Controlling Load Order{hidden}

h4. ロード順序の制御

{hidden}Using @dependsOn@ establishes a "hard" dependency in that if the dependency is not resolved, the plugin will give up and won't load.  It is possible though to have a weaker dependency using the @loadAfter@ and @loadBefore@ properties:{hidden}

@dependsOn@は、依存性が解決されなければプラグインのロードをあきらめるような「ハード依存性」を確立します。@loadAfter@と@loadBefore@プロパティを使うことで「より弱い依存性」を使うこともできます。

{code:java}
def loadAfter = ['controllers']
{code}

{hidden}Here the plugin will be loaded after the @controllers@ plugin if it exists, otherwise it will just be loaded. The plugin can then adapt to the presence of the other plugin, for example the Hibernate plugin has this code in its @doWithSpring@ closure:{hidden}

ここでは、もし@controllers@プラグインが存在すれば、それがロードされた後に、このプラグインがロードされます。 さもなければ(@controllers@プラグインが存在しなければ)、このプラグインは単にロードされます。プラグインは他のプラグインの存在に適応します。たとえば、Hibernateプラグインは@doWithSpring@クロージャで以下を行っています:

{code:java}
if (manager?.hasGrailsPlugin("controllers")) {
    openSessionInViewInterceptor(OpenSessionInViewInterceptor) {
        flushMode = HibernateAccessor.FLUSH_MANUAL
        sessionFactory = sessionFactory
    }
    grailsUrlHandlerMapping.interceptors << openSessionInViewInterceptor
}
{code}

{hidden}Here the Hibernate plugin will only register an @OpenSessionInViewInterceptor@ if the @controllers@ plugin has been loaded. The @manager@ variable is an instance of the [GrailsPluginManager|api:org.codehaus.groovy.grails.plugins.GrailsPluginManager] interface and it provides methods to interact with other plugins.{hidden}

ここではHibernateプラグインは、@controllers@プラグインがロードされてれば、@OpenSessionInViewInterceptor@だけを登録します。@manager@変数は[GrailsPluginManager|api:org.codehaus.groovy.grails.plugins.GrailsPluginManager]インターフェースのインスタンスであり、他のプラグインと相互作用するためのメソッドを提供しています。

{hidden}You can also use the @loadBefore@ property to specify one or more plugins that your plugin should load before:{hidden}

@loadBefore@プロパティには、あなたのプラグインの前にロードしておかなければならない1個以上のプラグインを指定します。

{code:java}
def loadBefore = ['rabbitmq']
{code}

{hidden}h4. Scopes and Environments{hidden}

h4. スコープと環境

{hidden}It's not only plugin load order that you can control. You can also specify which environments your plugin should be loaded in and which scopes (stages of a build). Simply declare one or both of these properties in your plugin descriptor:{hidden}

制御できるのはプラグインのロード順だけではありません。プラグインがどの環境にロードされるか、あるいはどのスコープ(ビルドの各段階)でロードされるかを指定することもできます。やり方は、それぞれのプロパティをプラグインディスクリプタ中に宣言するだけです。

{code}
def environments = ['development', 'test', 'myCustomEnv']
def scopes = [excludes:'war']
{code}

{hidden}In this example, the plugin will only load in the 'development' and 'test' environments. Nor will it be packaged into the WAR file, because it's excluded from the 'war' phase. This allows @development-only@ plugins to not be packaged for production use.{hidden}

この例では、プラグインは「development」と「test」環境のときだけロードされます。また、warフェイズからは除外設定されているので、WARファイル中にはパッケージされません。こうすることで、@development-only@のプラグインは、実運用時にはパッケージされないようにできます。

{hidden}The full list of available scopes are defined by the enum [BuildScope|api:grails.util.BuildScope], but here's a summary:{hidden}

利用可能なスコープの全てのリストはenum [BuildScope|api:grails.util.BuildScope]で定義されていますが、以下はその抜粋です:

{code}
* @test@ - when running tests
* @functional-test@ - when running functional tests
* @run@ - for run-app and run-war
* @war@ - when packaging the application as a WAR file
* @all@ - plugin applies to all scopes (default)
{code}

* @test@ - テスト実行時
* @functional-test@ - Functionalテスト実行時
* @run@ - run-appもしくはrun-war時
* @war@ - アプリケーションがWARファイルにパッケージ化されたとき
* @all@ - 全てのスコープに適用されるプラグイン(デフォルト)

{hidden}Both properties can be one of:{hidden}

いずれのプロパティにも以下のうち1つを設定することができます。

{hidden}
* a string - a sole inclusion
* a list - a list of environments or scopes to include
* a map - for full control, with 'includes' and/or 'excludes' keys that can have string or list values
{hidden}

* a string - 1つ含む
* a list - 含められるべき環境もしくはスコープのリスト
* a map - 全ての制御。キーは'includes'か'excludes'で、バリューは文字列もしくはリスト

{hidden}For example,{hidden}

例えば、

{code}
def environments = "test"
{code}

{hidden}will only include the plugin in the test environment, whereas{hidden}

という指定の場合、テスト環境のみでプラグインが含められます。これに対して

{code}
def environments = ["development", "test"]
{code}

{hidden}will include it in both the development _and_ test environments. Finally,{hidden}

はdevelopment _と_ test環境の両方を含みます。最後に

{code}
def environments = [includes: ["development", "test"]]
{code}

{hidden}will do the same thing.{hidden}

も同様の意味です。
