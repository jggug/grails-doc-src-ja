{hidden}h4. Distributing Plugins in the Grails Central Plugin Repository{hidden}
h4. プラグインをGrailsセントラルリポジトリに公開する

{hidden}The preferred way to distribute plugin is to publish to the official Grails Central Plugin Repository. This will make your plugin visible to the [list-plugins|commandLine] command:{hidden}
プラグインを配布するための良い方法は、公式Grailsセントラルリポジトリに公開することです。こうすることで、あなたのプラグインを[list-plugins|commandLine]コマンドで表示させることができます:

{code:java}
grails list-plugins
{code}

{hidden}which lists all plugins that are in the central repository. Your plugin will also be available to the [plugin-info|commandLine] command:{hidden}

このコマンドはセントラルリポジトリのすべてのプラグインを一覧表示します。あなたのプラグインを[plugin-info|commandLine]コマンドで表示することもできます:

{code:java}
grails plugin-info [plugin-name]
{code}

{hidden}which prints extra information about it, such as its description, who wrote, etc.{hidden}

これで説明や著者名、その他のプラグイン情報などを表示させることができます。

{hidden}
{note}
If you have created a Grails plugin and want it to be hosted in the central repository, you'll find instructions for getting an account on [this wiki page|http://grails.org/Creating+Plugins].
{note}
{hidden}

{note}
もしGrailsプラグインを開発して、セントラルリポジトリでホスティングしたい場合、アカウント入手の手順は[このWikiページ|http://grails.org/Creating+Plugins]にあります。
{note}

{hidden}When you have access to the Grails Plugin repository, install the [Release Plugin|http://grails-plugins.github.com/grails-release/docs/index.html] and execute the @publish-plugin@ command to release your plugin:{hidden}

Grailsプラグインリポジトリにアクセス権を持っていれば、[リリースプラグイン|http://grails-plugins.github.com/grails-release/docs/index.html]をインストールして、@publish-plugin@コマンドを実行することでプラグインをリリースすることができます:

{code:java}
grails install-plugin release
grails publish-plugin
{code}

{hidden}This will automatically commit any remaining source code changes to your SCM provider and then publish the plugin to the central repository. If the command is successful, it will immediately be available on the plugin portal at http://grails.org/plugin/<pluginName>. You can find out more about the Release plugin and its other features in [its user guide|http://grails-plugins.github.com/grails-release/docs/index.html].{hidden}

これにより、未コミットのソースコード変更を自動的にSCMプロバイダにコミットした上で、プラグインをセントラルリポジトリに公開します。もしコマンドが成功すれば、即座にhttp://grails.org/plugin/<pluginName>のプラグインポータルから利用可能になります。リリースプラグインとその他の機能に関する情報は、[ユーザガイド|http://grails-plugins.github.com/grails-release/docs/index.html]にあります。

{hidden}h4. Configuring Additional Repositories{hidden}

h4. 追加リポジトリの設定

{hidden}The process for configuring repositories in Grails differs between versions. For version of Grails 1.2 and earlier please refer to the [Grails 1.2 documentation|http://grails.org/doc/1.2.x/guide/12.%20Plug-ins.html#12.2%20Plugin%20Repositories] on the subject. The following sections cover Grails 1.3 and above.{hidden}

Grailsにおけるリポジトリの設定手順は、Grailsのバージョンによって異なっています。Grails 1.2以前の情報については[Grails 1.2のドキュメンテーション|http://grails.org/doc/1.2.x/guide/12.%20Plug-ins.html#12.2%20Plugin%20Repositories]を参照ください。以降の節は、Grails 1.3以降について記述しています。

{hidden}Grails 1.3 and above use Ivy under the hood to resolve plugin dependencies. The mechanism for defining additional plugin repositories is largely the same as [defining repositories for JAR dependencies|guide:ivy]. For example you can define a remote Maven repository that contains Grails plugins using the following syntax in @grails-app/conf/BuildConfig.groovy@:{hidden}

Grails 1.3以上では、下位層に隠されているIvyがプラグインの依存性を解決します。プラグインリポジトリを追加定義する仕組みは、 [JAR依存性を定義|guide:ivy]する方法とほぼ同じです。例えば、Grailsプラグインを含むリモートMavenリポジトリを定義するには、 @grails-app/conf/BuildConfig.groovy@中で以下のように記述します:

{code}
repositories {
    mavenRepo "http://repository.codehaus.org"

    // ...or with a name
    mavenRepo name: "myRepo",
              root: "http://myserver:8081/artifactory/plugins-snapshots-local"
}
{code}

{hidden}You can also define a SVN-based Grails repository (such as the one hosted at [http://plugins.grails.org|http://plugins.grails.org/]) using the @grailsRepo@ method:{hidden}

@grailsRepo@メソッドを使ってSVNベースのGrailsリポジトリ(例えば[http://plugins.grails.org|http://plugins.grails.org/]でホストされているリポジトリ)を定義することもできます:

{code}
repositories {
    grailsRepo "http://myserver/mygrailsrepo"

    // ...or with a name
    grailsRepo "http://myserver/svn/grails-plugins", "mySvnRepo" 
}
{code}

{hidden}There is a shortcut to setup the Grails central repository:{hidden}
Grailsセントラルリポジトリは以下の短縮記法で指定することもできます:

{code}
repositories {
    grailsCentral()
}
{code}

{hidden}The order in which plugins are resolved is based on the ordering of the repositories. So in this case the Grails central repository will be searched last:{hidden}

repositoriesの項目で列挙した順にプラグインは解決されます。なので以下ではGrailsセントラルリポジトリが最後に検索されます:

{code}
repositories {
    grailsRepo "http://myserver/mygrailsrepo"
    grailsCentral()
}
{code}

{hidden}All of the above examples use HTTP; however you can specify any [Ivy resolver|http://ant.apache.org/ivy/history/latest-milestone/settings/resolvers.html] to resolve plugins with. Below is an example that uses an SSH resolver:{hidden}

前述の例ではHTTPを使用していましたが、プラグイン解決に任意の[Ivyリゾルバ|http://ant.apache.org/ivy/history/latest-milestone/settings/resolvers.html]を使用することもできます。以下はSSHリゾルバを使用する例です:

{code}
def sshResolver = new SshResolver(user:"myuser", host:"myhost.com")
sshResolver.addArtifactPattern(
        "/path/to/repo/grails-[artifact]/tags/" +
        "LATEST_RELEASE/grails-[artifact]-[revision].[ext]")
sshResolver.latestStrategy =
        new org.apache.ivy.plugins.latest.LatestTimeStrategy()

sshResolver.changingPattern = ".*SNAPSHOT"
sshResolver.setCheckmodified(true)
{code}

{hidden}The above example defines an artifact pattern which tells Ivy how to resolve a plugin zip file. For a more detailed explanation on Ivy patterns see the [relevant section|http://ant.apache.org/ivy/history/2.1.0/concept.html#patterns] in the Ivy user guide.{hidden}

上記の例では、プラグインZIPファイルを解決する方法をIvyに伝えるため、アーテファクトのパターンを指定しています。Ivyパターンのより詳しい説明は、Ivyユーザガイドの[関連するセクション|http://ant.apache.org/ivy/history/2.1.0/concept.html#patterns]を参照下さい。

{hidden}h4. Publishing to Maven Compatible Repositories{hidden}
h4. Maven互換リポジトリへの公開

{hidden}In general it is recommended for Grails 1.3 and above to use standard Maven-style repositories to self host plugins. The benefits of doing so include the ability for existing tooling and repository managers to interpret the structure of a Maven repository. In addition Maven compatible repositories are not tied to SVN as Grails repositories are.{hidden}

自身でプラグインをホストする場合、Grails 1.3以上ではMavenスタイルの標準リポジトリを使用することが推奨です。そうすることの利点は、Mavenリポジトリ構造を解釈するのに既存ツールとリポジトリマネージャを利用できることです。加えて、Maven互換リポジトリはGrailsリポジトリのようにSVNとは結び付いていません。

{hidden}You use the Maven publisher plugin to publish a plugin to a Maven repository. Please refer to the section of the [Maven deployment|guide:mavendeploy] user guide on the subject.{hidden}

Mavenリポジトリに公開するには、「maven publisher plugin」を使用できます。ユーザガイドの[Maven配布|guide:mavendeploy]の章を参照下さい。

{hidden}h4. Publishing to Grails Compatible Repositories{hidden}

h4. Grails互換リポジトリへの公開

{hidden}Specify the @grails.plugin.repos.distribution.myRepository@ setting within the grails-app/conf/BuildConfig.groovy file to publish a Grails plugin to a Grails-compatible repository:{hidden}

Grails互換リポジトリにGrailsプラグインを公開するには、grails-app/conf/BuildConfig.groovyファイルの@grails.plugin.repos.distribution.myRepository@を設定します。

{code}
grails.plugin.repos.distribution.myRepository =
        "https://svn.codehaus.org/grails/trunk/grails-test-plugin-repo"
{code}

{hidden}You can also provide this settings in the \$USER_HOME/.grails/settings.groovy file if you prefer to share the same settings across multiple projects.{hidden}

複数のプロジェクトで同じ設定を共有したい場合、これを\$USER_HOME/.grails/settings.groovyファイル中に設定します。

{hidden}Once this is done use the @repository@ argument of the @release-plugin@ command to specify the repository to release the plugin into:{hidden}

一回これを行えば、以下のように@release-plugin@コマンドの@repository@引数で、プラグインをリリースするリポジトリを指定することができます。

{code}
grails release-plugin -repository = myRepository
{code}
