{hidden}
Grails supports many-to-many relationships by defining a @hasMany@ on both sides of the relationship and having a @belongsTo@ on the owned side of the relationship:
{hidden}
Grailsでは関連の両側で@hasMany@を定義し、関連の所有される側に@belongsTo@を付けることで、多対多の関連をサポートします。

{code}
class Book {
    static belongsTo = Author
    static hasMany = [authors:Author]
    String title
}
{code}

{code}
class Author {
    static hasMany = [books:Book]
    String name
}
{code}

{hidden}
Grails maps a many-to-many using a join table at the database level. The owning side of the relationship, in this case @Author@, takes responsibility for persisting the relationship and is the only side that can cascade saves across.
{hidden}
Grailsはデータベースレベルでは結合テーブルを使用して多対多をマップします。
関連の所有する側（この例では@Author@）は、関連の永続化の責務を持ちます。そして、この所有する側からのみ保存のカスケードが可能です。

{hidden}
For example this will work and cascade saves:
{hidden}
例えば、これは正しくカスケード保存されます。

{code}
new Author(name:"Stephen King")
        .addToBooks(new Book(title:"The Stand"))
        .addToBooks(new Book(title:"The Shining"))
        .save()
{code}

{hidden}
However this will only save the @Book@ and not the authors!
{hidden}
しかし、これは@Book@だけが保存されauthorsは保存されません！

{code}
new Book(name:"Groovy in Action")
        .addToAuthors(new Author(name:"Dierk Koenig"))
        .addToAuthors(new Author(name:"Guillaume Laforge"))
        .save()
{code}

{hidden}
This is the expected behaviour as, just like Hibernate, only one side of a many-to-many can take responsibility for managing the relationship.
{hidden}
Hibernateがそうであるように、多対多の片側だけが関連を管理する責務を持てるので、これは期待通りの振る舞いです。

{hidden}
{warning}
Grails' [Scaffolding|guide:scaffolding] feature *does not* currently support many-to-many relationship and hence you must write the code to manage the relationship yourself
{warning}
{hidden}
{warning}
Grailsの[スカッフォルド|guide:scaffolding]は現在、多対多の関連をサポートしていません。
そのため、関連を管理するコードは自分で書かなければなりません。
{warning}
