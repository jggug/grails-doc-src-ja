{hidden}
A one-to-many relationship is when one class, example @Author@, has many instances of another class, example @Book@. With Grails you define such a relationship with the @hasMany@ setting:
{hidden}
1対多の関連は、@Author@のような1つのクラス、@Book@のような他クラスのインスタンスを複数保持します。
Grailsでは@hasMany@の設定でこの関連を定義します。

{code}
class Author {
    static hasMany = [books: Book]

    String name
}
{code}

{code}
class Book {
    String title
}
{code}

{hidden}
In this case we have a unidirectional one-to-many. Grails will, by default, map this kind of relationship with a join table.
{hidden}
この場合は単方向の1対多を持っています。
Grailsはデフォルトでは結合テーブルによって、この種類の関連をマップします。

{hidden}
{note}
The [ORM DSL|guide:ormdsl] allows mapping unidirectional relationships using a foreign key association instead
{note}
{hidden}
{note}
[ORM DSL|guide:ormdsl]では代わりに外部キーの参照を使用した単方向関連の設定もできます。
{note}

{hidden}
Grails will automatically inject a property of type @java.util.Set@ into the domain class based on the @hasMany@ setting. This can be used to iterate over the collection:
{hidden}
Grailsは@hasMany@を持つドメインクラスに@java.util.Set@型のプロパティを自動的に注入します。
このコレクションはイテレートして使えます。

{code}
def a = Author.get(1)

for (book in a.books) {
    println book.title
}
{code}

{hidden}
{note}
The default fetch strategy used by Grails is "lazy", which means that the collection will be lazily initialized on first access. This can lead to the [n+1 problem|http://www.javalobby.org/java/forums/t20533.html] if you are not careful.

If you need "eager" fetching you can use the [ORM DSL|guide:ormdsl] or specify eager fetching as part of a [query|guide:querying]
{note}
{hidden}
{note}
Grailsによるデフォルトのフェッチ戦略は"lazy"です。これは最初のアクセスによってコレクションが遅延初期化されること意味します。
この遅延初期化は、注意を怠ると[N+1問題|http://www.javalobby.org/java/forums/t20533.html]を引き起こします。

もし"eager"フェッチが必要な場合は、[ORM DSL|guide:ormdsl]を使うか、または[クエリ|guide:querying]中で"eager"フェッチを指定してください。
{note}

{hidden}
The default cascading behaviour is to cascade saves and updates, but not deletes unless a @belongsTo@ is also specified:
{hidden}
デフォルトでは保存と更新がカスケードされます。しかし、削除は@belongsTo@が指定されるまでカスケードされません。

{code}
class Author {
    static hasMany = [books: Book]

    String name
}
{code}

{code}
class Book {
    static belongsTo = [author: Author]
    String title
}
{code}

{hidden}
If you have two properties of the same type on the many side of a one-to-many you have to use @mappedBy@ to specify which the collection is mapped:
{hidden}
もし、1対多の「多」側で同じ型のプロパティが2つある場合は、マップされるコレクションを指定するために@mappedBy@を使ってください。

{code}
class Airport {
    static hasMany = [flights: Flight]
    static mappedBy = [flights: "departureAirport"]
}
{code}

{code}
class Flight {
    Airport departureAirport
    Airport destinationAirport
}
{code}

{hidden}
This is also true if you have multiple collections that map to different properties on the many side:
{hidden}
これは、「多」側で異なるプロパティへマップされた複数のコレクションがある場合でも同じです。

{code}
class Airport {
    static hasMany = [outboundFlights: Flight, inboundFlights: Flight]
    static mappedBy = [outboundFlights: "departureAirport",
                       inboundFlights: "destinationAirport"]
}
{code}

{code}
class Flight {
    Airport departureAirport
    Airport destinationAirport
}
{code}

