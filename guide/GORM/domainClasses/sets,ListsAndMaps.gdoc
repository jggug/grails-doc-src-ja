{hidden}h4. Sets of Objects{hidden}
h4. オブジェクトのセット

{hidden}
By default when you define a relationship with GORM it is a @java.util.Set@ which is an unordered collection that cannot contain duplicates. In other words when you have:
{hidden}
デフォルトでは、GORMを使って関連を定義した場合、@java.util.Set@になります。
これは、順序を持たないコレクションで、重複要素を含めません。
言い換えると、次のようなドメインクラスがあるとき:

{code}
class Author {
    static hasMany = [books: Book]
}
{code}

{hidden}
The books property that GORM injects is a @java.util.Set@. Sets guarantee uniquenes but not order, which may not be what you want. To have custom ordering you configure the Set as a @SortedSet@:
{hidden}
GORMが注入する@books@プロパティは@java.util.Set@になる、ということです。
セットはユニーク性を保証しますが、順序は保証しません。
これでは都合が悪い場合もあるかもしれません。
独自の順序を持つにはセットを@SortedSet@に設定します:

{code}
class Author {

    SortedSet books

    static hasMany = [books: Book]
}
{code}

{hidden}
In this case a @java.util.SortedSet@ implementation is used which means you must implement @java.lang.Comparable@ in your Book class:
{hidden}
この場合は、@java.util.SortedSet@の実装が使われます。
これは、Bookクラスで@java.lang.Comparable@を実装しなければならないことを意味します:

{code}
class Book implements Comparable {

    String title
    Date releaseDate = new Date()

    int compareTo(obj) {
        releaseDate.compareTo(obj.releaseDate)
    }
}
{code}

{hidden}
The result of the above class is that the Book instances in the books collection of the Author class will be ordered by their release date.
{hidden}
上記のようにクラスを変更することで、Authorクラスのbooksコレクションのインスタンスがリリース日時順になります。

{hidden}
h4. Lists of Objects
{hidden}
h4. オブジェクトのリスト

{hidden}
To keep objects in the order which they were added and to be able to reference them by index like an array you can define your collection type as a @List@:
{hidden}
追加された順にオブジェクトを保ち、配列のようにインデックスで参照できるようにするには、コレクション型をListで定義します:

{code}
class Author {

    List books

    static hasMany = [books: Book]
}
{code}

{hidden}
In this case when you add new elements to the books collection the order is retained in a sequential list indexed from 0 so you can do:
{hidden}
この場合は、新しい要素をbooksコレクションへ追加したときに、0からインデックスが付与された一連のリストとして、順序が保持されます。
そして、次のようにアクセスできます:

{code}
author.books[0] // get the first book
{code}

{hidden}
The way this works at the database level is Hibernate creates a @books_idx@ column where it saves the index of the elements in the collection to retain this order at the database level.
{hidden}
データベースレベルにおいて、Hibernateはデータベース上に順序を保持するために、@books_idx@カラムを作成して、コレクション内の要素のインデックスを保存します。

{hidden}
When using a @List@, elements must be added to the collection before being saved, otherwise Hibernate will throw an exception (@org.hibernate.HibernateException@: null index column for collection):
{hidden}
@List@を使った場合、要素は保存前にコレクションへ追加されなければなりません。
コレクション追加前に単体で保存されてしまっていると、Hibernateが例外をスローします（@org.hibernate.HibernateException@: コレクションのインデックスカラムがnull）。

{code}
// This won't work!
def book = new Book(title: 'The Shining')
book.save()
author.addToBooks(book)

// Do it this way instead.
def book = new Book(title: 'Misery')
author.addToBooks(book)
author.save()
{code}

{hidden}h4. Bags of Objects{hidden}
h4. オブジェクトのバッグ(Bag)

{hidden}If ordering and uniqueness aren't a concern (or if you manage these explicitly) then you can use the Hibernate [Bag|http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html/collections.html] type to represent mapped collections.{hidden}

ユニークや順序が必要の無い場合は(また明示的に自分で管理する場合)、Hibernateの[Bag|http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html/collections.html]型をコレクションマップとして使用できます。

{hidden}The only change required for this is to define the collection type as a @Collection@:{hidden}
この場合はコレクションの型を@Collection@型として定義します。

{code}
class Author {

   Collection books

   static hasMany = [books: Book]
}
{code}

{hidden}Since uniqueness and order aren't managed by Hibernate, adding to or removing from collections mapped as a Bag don't trigger a load of all existing instances from the database, so this approach will perform better and require less memory than using a @Set@ or a @List@.{hidden}
Hibernateでユニークとオーダーが管理されないので、Bagにマップされたコレクションは、追加削除時に既存のインスタンスをデータベースからロードしません。このため@Set@または@Listよりメモリ使用量が少なくパフォーマンスが良くなります。

{hidden}h4. Maps of Objects{hidden}
h4. オブジェクトのマップ

{hidden}If you want a simple map of string/value pairs GORM can map this with the following:{hidden}
文字列/値のような、単純なマップを使用する場合、GORMでは次のように定義します。

{code}
class Author {
    Map books // map of ISBN:book names
}

def a = new Author()
a.books = ["1590597583":"Grails Book"]
a.save()
{code}
{hidden}In this case the key and value of the map MUST be strings.{hidden}
このケースでは、 キーと値は*必ず*文字列である必要があります。

{hidden}If you want a Map of objects then you can do this:{hidden}
オブジェクトのマップが必要な場合は次のように:

{code}
class Book {

    Map authors

    static hasMany = [authors: Author]
}

def a = new Author(name:"Stephen King")

def book = new Book()
book.authors = [stephen:a]
book.save()
{code}

{hidden}The static @hasMany@ property defines the type of the elements within the Map. The keys for the map *must* be strings.{hidden}
@hasMany@プロパティで、Mapのエレメントの型を定義します。マップのキーは*必ず*文字列にしてください。

{hidden}
h4. A Note on Collection Types and Performance
{hidden}
h4. コレクション型とパフォーマンスについて

{hidden}
The Java @Set@ type doesn't allow duplicates. To ensure uniqueness when adding an entry to a @Set@ association Hibernate has to load the entire associations from the database. If you have a large numbers of entries in the association this can be costly in terms of performance.
{hidden}
Javaの@Set@型は重複を許容しません。
@Set@の関連へエントリを追加するときに、ユニーク性を保証するため、Hibernateはデータベースからすべての関連を読み込まなければなりません。
もし関連のエントリの数が大量の場合、パフォーマンスの点でコストがかかりすぎる可能性があります。

{hidden}
The same behavior is required for @List@ types, since Hibernate needs to load the entire association to maintain order. Therefore it is recommended that if you anticipate a large numbers of records in the association that you make the association bidirectional so that the link can be created on the inverse side. For example consider the following code:
{hidden}
同じ振る舞いが@List@型でも必要になります。
これは、Hibernateがすべての関連の順序を保持するため、事前にすべての関連を読み込む必要があるからです。
そのため、事前に関連エントリが大量になることがわかっている場合は、双方向関連にして、反対側から関連を作成することをお勧めします。
たとえば、以下のコードを考えてみます:

{code:java}
def book = new Book(title:"New Grails Book")
def author = Author.get(1)
book.author = author
book.save()
{code}

{hidden}
In this example the association link is being created by the child (Book) and hence it is not necessary to manipulate the collection directly resulting in fewer queries and more efficient code. Given an @Author@ with a large number of associated @Book@ instances if you were to write code like the following you would see an impact on performance:
{hidden}
この例では、関連は子（Book）によって作成されます。
このようにすることで、直接コレクションを操作する必要がなくなるため、より少ないクエリで効率的なコードとなります。
@Author@と関連する大量の@Book@インスタンスが与えられたとき、下のようなコードを書いてしまうとパフォーマンスに重大な影響があります:

{code:java}
def book = new Book(title:"New Grails Book")
def author = Author.get(1)
author.addToBooks(book)
author.save()
{code}

{hidden}
You could also model the collection as a Hibernate Bag as described above.
{hidden}
また、上記で説明したように、HibernateのBagとしてコレクションを作ることもできます。
