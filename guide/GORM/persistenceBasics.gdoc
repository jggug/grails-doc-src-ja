{hidden}A key thing to remember about Grails is that under the surface Grails is using "Hibernate":http://www.hibernate.org/ for persistence. If you are coming from a background of using "ActiveRecord":http://wiki.rubyonrails.org/rails/pages/ActiveRecord or [iBatis/MyBatis|http://www.mybatis.org/], Hibernate's "session" model may feel a little strange.{hidden}
Grailsでは、永続化実現のために"Hibernate":http://www.hibernate.org/ が使われています。Hibernateは「セッション」という概念を採用していますが、この概念は"ActiveRecord":http://wiki.rubyonrails.org/rails/pages/ActiveRecord や[iBatis/MyBatis|http://www.mybatis.org/]に慣れ親しんでいる人にとっては、少し不可解に感じるかも知れません。

{hidden}Grails automatically binds a Hibernate session to the currently executing request. This lets you use the [save|domainClasses] and [delete|domainClasses] methods as well as other GORM methods transparently.{hidden}
Grailsは、自動的に、現在実行中のリクエストにHibernateのセッションをバインドします。そのため、[save|domainClasses]メソッドや[delete|domainClasses]メソッドを、他のGORMメソッドと同様に透過的に利用することができます。

{hidden}h4. Transactional Write-Behind{hidden}
h4. トランザクション内における遅延書き込み

{hidden}A useful feature of Hibernate over direct JDBC calls and even other frameworks is that when you call [save|domainClasses] or [delete|domainClasses] it does not necessarily perform any SQL operations *at that point*. Hibernate batches up SQL statements and executes them as late as possible, often at the end of the request when flushing and closing the session. This is typically done for you automatically by Grails, which manages your Hibernate session.{hidden}
Hibernateは、直接JDBC APIを呼び出す方法や、他のフレームワークを使う方法と比べて便利な特徴を備えています。具体的には[save|domainClasses]メソッドや[delete|domainClasses]メソッドを呼び出した*瞬間*にはSQLを発行せず、できる限り後ろで、まとめて発行しようとします。セッションがフラッシュ、またはクローズされるまでSQLが発行されないことも珍しくありません。なお、通常では、これらの動作はHibernateのセッションを管理しているGrailsによって自動的に行われます。

{hidden}Hibernate caches database updates where possible, only actually pushing the changes when it knows that a flush is required, or when a flush is triggered programmatically. One common case where Hibernate will flush cached updates is when performing queries since the cached information might be included in the query results. But as long as you're doing non-conflicting saves, updates, and deletes, they'll be batched until the session is flushed. This can be a significant performance boost for applications that do a lot of database writes.{hidden}
Hibernateは、データベースの更新についても可能な限りキャッシュします。具体的には、Hibernateによって必要と判断されたときか、プログラム上でflushが行われたときにのみ、キャッシュの反映が行われます。キャッシュの反映が行われる良くあるケースの1つに、キャッシュされたままのクエリーによる更新結果を利用するようなクエリーを実行した場合が挙げられます。ただし、後続するクエリーと競合しないような保存、更新、削除のみを実行している限りは、キャッシュの反映は遅延され、セッションがフラッシュされるタイミングで、まとめてクエリーが実行されることになります。このような仕組みによって、大量のデータベース更新を行うアプリケーションの性能が大幅に向上します。

{hidden}Note that flushing is not the same as committing a transaction. If your actions are performed in the context of a transaction, flushing will execute SQL updates but the database will save the changes in its transaction queue and only finalize the updates when the transaction commits.{hidden}
なお、キャッシュの反映とトランザクションのコミットは同じではないことに注意してください。トランザクション内でキャッシュが反映されると、データベースに更新SQLが発行されることになりますが、それらの更新はトランザクションキューに留まったままになります。実際にデータベースに更新が反映されるのは、トランザクションのコミットが実行された時となります。

