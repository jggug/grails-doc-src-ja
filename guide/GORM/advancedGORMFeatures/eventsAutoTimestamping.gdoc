{hidden}GORM supports the registration of events as methods that get fired when certain events occurs such as deletes, inserts and updates. The following is a list of supported events:{hidden}
GORMは、削除や新規追加・更新などの特定のイベントが発生したときに処理を行う方法として、イベントの登録をサポートしています。
サポートしているイベントの一覧を以下に示します:

{hidden}
* @beforeInsert@ - Executed before an object is initially persisted to the database
* @beforeUpdate@ - Executed before an object is updated
* @beforeDelete@ - Executed before an object is deleted
* @beforeValidate@ - Executed before an object is validated
* @afterInsert@ - Executed after an object is persisted to the database
* @afterUpdate@ - Executed after an object has been updated
* @afterDelete@ - Executed after an object has been deleted
* @onLoad@ - Executed when an object is loaded from the database
{hidden}

* @beforeInsert@ - データベースにオブジェクトが新規保存される前に実行される
* @beforeUpdate@ - オブジェクトが更新される前に実行される
* @beforeDelete@ - オブジェクトが削除される前に実行される
* @beforeValidate@ - オブジェクトがバリデートされる前に実行される
* @afterInsert@ - データベースにオブジェクトが新規保存された後に実行される
* @afterUpdate@ - オブジェクトが更新された後に実行される
* @afterDelete@ - オブジェクトが削除された後に実行される
* @onLoad@ - オブジェクトがデータベースからロードされたときに実行される

{hidden}To add an event simply register the relevant method with your domain class.{hidden}
イベントを追加するには、単純に対応するメソッドをドメインクラスに追加してください。

{warning}
{hidden}Do not attempt to flush the session within an event (such as with obj.save(flush:true)). Since events are fired during flushing this will cause a StackOverflowError.{hidden}
イベント内で（@obj.save(flush:true)@のように）セッションをフラッシュしようとしてはいけません。
イベントはフラッシュ処理中の一環として実行されるため、これはStackOverflowErrorを引き起こしてしまいます。
{warning}

{hidden}h3. Event types{hidden}
h3. イベントの種類

{hidden}h4. The beforeInsert event{hidden}
h4. beforeInsertイベント

{hidden}Fired before an object is saved to the database{hidden}
オブジェクトがデータベースに新規保存される前に実行されます:

{code:java}
class Person {
   private static final Date NULL_DATE = new Date(0)

   String firstName
   String lastName
   Date signupDate = NULL_DATE

   def beforeInsert() {
      if (signupDate == NULL_DATE) {
         signupDate = new Date()
      }
   }
}
{code}

{hidden}h4. The beforeUpdate event{hidden}
h4. beforeUpdateイベント

{hidden}Fired before an existing object is updated{hidden}
既存オブジェクトが更新される前に実行されます:

{code:java}
class Person {

   def securityService

   String firstName
   String lastName
   String lastUpdatedBy

   static constraints = {
      lastUpdatedBy nullable: true
   }

   def beforeUpdate() {
      lastUpdatedBy = securityService.currentAuthenticatedUsername()
   }
}
{code}

{hidden}h4. The beforeDelete event{hidden}
h4. beforeDeleteイベント

{hidden}Fired before an object is deleted.{hidden}
オブジェクトが削除される前に実行されます:

{code:java}
class Person {
   String name

   def beforeDelete() {
      ActivityTrace.withNewSession {
         new ActivityTrace(eventName: "Person Deleted", data: name).save()
      }
   }
}
{code}

{hidden}Notice the usage of @withNewSession@ method above. Since events are triggered whilst Hibernate is flushing using persistence methods like @save()@ and @delete()@ won't result in objects being saved unless you run your operations with a new @Session@.{hidden}
上で@withNewSession@メソッドを利用している点に注目してください。
イベントはHibernateがフラッシュしている最中に実行されるため、新しい@Session@で操作を実行しない限り、@save()@や@delete()@のような永続化メソッドによってオブジェクトを保存することはできません。

{hidden}Fortunately the @withNewSession@ method lets you share the same transactional JDBC connection even though you're using a different underlying @Session@.{hidden}
ありがたいことに@withNewSession@メソッドを使うと、@Session@そのものは異なりますが、同一トランザクション内のJDBCコネクションを共有できます。

{hidden}h4. The beforeValidate event{hidden}
h4. beforeValidateイベント

{hidden}Fired before an object is validated.{hidden}
オブジェクトがバリデートされる前に実行されます:

{code:java}
class Person {
   String name

   static constraints = {
       name size: 5..45
   }

   def beforeValidate() {
       name = name?.trim()
   }
}
{code}

{hidden}The @beforeValidate@ method is run before any validators are run.{hidden}
いずれか1つのバリデータが実行される前に、@beforeValidate@メソッドが実行されます。

{note}
{hidden}Validation may run more often than you think. It is triggered by the @validate()@ and @save()@ methods as you'd expect, but it is also typically triggered just before the view is rendered as well. So when writing @beforeValidate()@ implementations, make sure that they can handle being called multiple times with the same property values.{hidden}
バリデーションはあなたが考えるよりも多くの頻度で実行される可能性があります。
あなたの予想通り@validate()@と@save()@メソッドによって実行されますが、ビューがレンダリングされる直前にもよく実行されます。
このため、@beforeValidate@の実装を書くときには、同じプロパティ値で複数回呼ばれても処理できるように気をつけてください。
{note}

{hidden}GORM supports an overloaded version of @beforeValidate@ which accepts a @List@ parameter which may include
the names of the properties which are about to be validated.  This version of @beforeValidate@ will be called
when the @validate@ method has been invoked and passed a @List@ of property names as an argument.{hidden}
GORMは、バリデートしようとするプロパティ名を含んだ@List@パラメータを受け取る、オーバロードされたバージョンの@beforeValidate@をサポートします。
この@beforeValidate@は、@validate@メソッドが実行されてプロパティ名の@List@を引数として渡されたときに呼ばれます。

{code:java}
class Person {
   String name
   String town
   Integer age

   static constraints = {
       name size: 5..45
       age range: 4..99
   }

   def beforeValidate(List propertiesBeingValidated) {
      // do pre validation work based on propertiesBeingValidated
   }
}

def p = new Person(name: 'Jacob Brown', age: 10)
p.validate(['age', 'name'])
{code}

{note}
{hidden}
Note that when @validate@ is triggered indirectly because of a call to the @save@ method that
the @validate@ method is being invoked with no arguments, not a @List@ that includes all of
the property names.
{hidden}
@save@メソッドの呼出によって@validate@が間接的に実行されるとき、@validate@メソッドは、すべてのプロパティ名を含む@List@を引数として受け取るのではなく、引数なしで実行されていることに注意してください。
{note}

{hidden}
Either or both versions of @beforeValidate@ may be defined in a domain class.  GORM will
prefer the @List@ version if a @List@ is passed to @validate@ but will fall back on the
no-arg version if the @List@ version does not exist.  Likewise, GORM will prefer the
no-arg version if no arguments are passed to @validate@ but will fall back on the
@List@ version if the no-arg version does not exist.  In that case, @null@ is passed to @beforeValidate@.
{hidden}
@beforeValidate@のいずれかまたは両方のバージョンをドメインクラスに定義できます。
GORMは、@List@が@validate@に渡されれば@List@バージョンを選ぼうとしますが、もし@List@バージョンが存在しなければ、引数なしバージョンにフォールバックします。
同様に、GORMは@validate@に引数が渡されなければ引数なしバージョンを選ぼうとしますが、もし引数なしバージョンが存在しなければ、@List@バージョンにフォールバックします。
そのような場合、@null@が@beforeValidate@に渡されます。

{hidden}h4. The onLoad/beforeLoad event{hidden}
h4. onLoad/beforeLoadイベント

{hidden}Fired immediately before an object is loaded from the database:{hidden}
データベースからオブジェクトがロードされる直前に実行されます:

{code:java}
class Person {
   String name
   Date dateCreated
   Date lastUpdated

   def onLoad() {
      log.debug "Loading \${id}"
   }
}
{code}

{hidden}@beforeLoad()@ is effectively a synonym for @onLoad()@, so only declare one or the other.{hidden}
@beforeLoad()@は実質的に@onLoad()@の別名なので、どちらか一方だけを宣言すれば良いです。

{hidden}h4. The afterLoad event{hidden}
h4. afterLoadイベント

{hidden}Fired immediately after an object is loaded from the database:{hidden}
データベースからオブジェクトがロードされた直後に実行されます:

{code:java}
class Person {
   String name
   Date dateCreated
   Date lastUpdated

   def afterLoad() {
      name = "I'm loaded"
   }
}
{code}

{hidden}h4. Custom Event Listeners{hidden}
h4. カスタムイベントリスナ

{hidden}As of Grails 2.0 there is a new API for plugins and applications to register and listen for persistence events. This API is not tied to Hibernate and also works for other persistence plugins such as the [MongoDB plugin for GORM|http://grails.org/plugin/mongodb].{hidden}
Grails 2.0以降では、永続化イベントを登録・監視するためのプラグインとアプリケーション向けの新しいAPIがあります。
このAPIはHibernateに依存していないため、[MongoDB plugin for GORM|http://grails.org/plugin/mongodb]のような他の永続化プラグインでも動作します。

{hidden}To use this API you need to subclass @AbstractPersistenceEventListener@ (in package _org.grails.datastore.mapping.engine.event_) and implement the methods @onPersistenceEvent@ and @supportsEventType@. You also must provide a reference to the datastore to the listener.  The simplest possible implementation can be seen below:{hidden}
このAPIを使うには、（_org.grails.datastore.mapping.engine.event_ パッケージの）@AbstractPersistenceEventListener@のサブクラスと、その@onPersistenceEvent@と@supportsEventType@メソッドの実装が必要です。
また、リスナにデータストアへの参照を渡さなければなりません。
もっとも単純な実装を以下に示します:

{code}
public MyPersistenceListener(final Datastore datastore) {
    super(datastore)
}

@Override
protected void onPersistenceEvent(final AbstractPersistenceEvent event) {
    switch(event.eventType) {
        case PreInsert:
            println "PRE INSERT \${event.entityObject}"
        break
        case PostInsert:
            println "POST INSERT \${event.entityObject}"
        break
        case PreUpdate:
            println "PRE UPDATE \${event.entityObject}"
        break;
        case PostUpdate:
            println "POST UPDATE \${event.entityObject}"
        break;
        case PreDelete:
            println "PRE DELETE \${event.entityObject}"
        break;
        case PostDelete:
            println "POST DELETE \${event.entityObject}"
        break;
        case PreLoad:
            println "PRE LOAD \${event.entityObject}"
        break;
        case PostLoad:
            println "POST LOAD \${event.entityObject}"
        break;
    }
}

@Override
public boolean supportsEventType(Class<? extends ApplicationEvent> eventType) {
    return true
}
{code}

{hidden}The @AbstractPersistenceEvent@ class has many subclasses (@PreInsertEvent@, @PostInsertEvent@ etc.) that provide further information specific to the event. A @cancel()@ method is also provided on the event which allows you to veto an insert, update or delete operation.{hidden}
@AbstractPersistenceEvent@クラスは、それぞれのイベントに特有の情報を提供する多くのサブクラス（@PreInsertEvent@, @PostInsertEvent@, 等）を持っています。
また、イベント内で新規追加・更新・削除操作をキャンセルできる@cancel()@メソッドも提供されます。

{hidden}Once you have created your event listener you need to register it with the @ApplicationContext@. This can be done in @BootStrap.groovy@:{hidden}
独自イベントリスナを作成したら、@ApplicationContext@に登録する必要があります。
これは@BootStrap.groovy@で行えます:

{code}
def init = {
    application.mainContext.eventTriggeringInterceptor.datastores.each { k, datastore ->
        applicationContext.addApplicationListener new MyPersistenceListener(datastore)
    }
}
{code}

{hidden}or use this in a plugin:{hidden}
または、プラグイン上であれば次のようにします:

{code}
def doWithApplicationContext = { applicationContext ->
    application.mainContext.eventTriggeringInterceptor.datastores.each { k, datastore ->
        applicationContext.addApplicationListener new MyPersistenceListener(datastore)
    }
}
{code}

{hidden}h4. Hibernate Events{hidden}
h4. Hibernateイベント

{hidden}It is generally encouraged to use the non-Hibernate specific API described above, but if you need access to more detailed Hibernate events then you can define custom Hibernate-specific event listeners.{hidden}
一般的には前述したHibernate固有ではないAPIの使用が推奨されます。
しかし、より詳細なHibernateイベントにアクセスする必要がある場合は、Hibernate固有のカスタムイベントリスナを定義できます。

{hidden}You can also register event handler classes in an application's @grails-app/conf/spring/resources.groovy@ or in the @doWithSpring@ closure in a plugin descriptor by registering a Spring bean named @hibernateEventListeners@. This bean has one property, @listenerMap@ which specifies the listeners to register for various Hibernate events.{hidden}
また、アプリケーションの@grails-app/conf/spring/resources.groovy@やプラグインディスクリプタの@doWithSpring@クロージャで、@hibernateEventListeners@という名前でSpringビーンを登録することで、イベントハンドラクラスを登録することができます。
このビーンは@listenerMap@という1つのプロパティを持ちます。このプロパティでは様々なHibernateイベントに対して登録するリスナを指定します。

{hidden}The values of the Map are instances of classes that implement one or more Hibernate listener interfaces. You can use one class that implements all of the required interfaces, or one concrete class per interface, or any combination. The valid Map keys and corresponding interfaces are listed here:{hidden}
Mapの値は、Hibernateのリスナインターフェイスを1つ以上実装したクラスのインスタンスです。
すべての必要なインターフェイスを実装した1つのクラスを使ったり、1つのインターフェイスごとに1つの実装クラスを使うことができます。またその組合せも可能です。
マップの有効なキーと対応するインターフェイスを以下に列挙します:

{table}
*Name* | *Interface*
auto-flush | [AutoFlushEventListener|api:org.hibernate.event.AutoFlushEventListener]
merge | [MergeEventListener|api:org.hibernate.event.MergeEventListener]
create | [PersistEventListener|api:org.hibernate.event.PersistEventListener]
create-onflush | [PersistEventListener|api:org.hibernate.event.PersistEventListener]
delete | [DeleteEventListener|api:org.hibernate.event.DeleteEventListener]
dirty-check | [DirtyCheckEventListener|api:org.hibernate.event.DirtyCheckEventListener]
evict | [EvictEventListener|api:org.hibernate.event.EvictEventListener]
flush | [FlushEventListener|api:org.hibernate.event.FlushEventListener]
flush-entity | [FlushEntityEventListener|api:org.hibernate.event.FlushEntityEventListener]
load | [LoadEventListener|api:org.hibernate.event.LoadEventListener]
load-collection | [InitializeCollectionEventListener|api:org.hibernate.event.InitializeCollectionEventListener]
lock | [LockEventListener|api:org.hibernate.event.LockEventListener]
refresh | [RefreshEventListener|api:org.hibernate.event.RefreshEventListener]
replicate | [ReplicateEventListener|api:org.hibernate.event.ReplicateEventListener]
save-update | [SaveOrUpdateEventListener|api:org.hibernate.event.SaveOrUpdateEventListener]
save | [SaveOrUpdateEventListener|api:org.hibernate.event.SaveOrUpdateEventListener]
update | [SaveOrUpdateEventListener|api:org.hibernate.event.SaveOrUpdateEventListener]
pre-load | [PreLoadEventListener|api:org.hibernate.event.PreLoadEventListener]
pre-update | [PreUpdateEventListener|api:org.hibernate.event.PreUpdateEventListener]
pre-delete | [PreDeleteEventListener|api:org.hibernate.event.PreDeleteEventListener]
pre-insert | [PreInsertEventListener|api:org.hibernate.event.PreInsertEventListener]
pre-collection-recreate | [PreCollectionRecreateEventListener|api:org.hibernate.event.PreCollectionRecreateEventListener]
pre-collection-remove | [PreCollectionRemoveEventListener|api:org.hibernate.event.PreCollectionRemoveEventListener]
pre-collection-update | [PreCollectionUpdateEventListener|api:org.hibernate.event.PreCollectionUpdateEventListener]
post-load | [PostLoadEventListener|api:org.hibernate.event.PostLoadEventListener]
post-update | [PostUpdateEventListener|api:org.hibernate.event.PostUpdateEventListener]
post-delete | [PostDeleteEventListener|api:org.hibernate.event.PostDeleteEventListener]
post-insert | [PostInsertEventListener|api:org.hibernate.event.PostInsertEventListener]
post-commit-update | [PostUpdateEventListener|api:org.hibernate.event.PostUpdateEventListener]
post-commit-delete | [PostDeleteEventListener|api:org.hibernate.event.PostDeleteEventListener]
post-commit-insert | [PostInsertEventListener|api:org.hibernate.event.PostInsertEventListener]
post-collection-recreate | [PostCollectionRecreateEventListener|api:org.hibernate.event.PostCollectionRecreateEventListener]
post-collection-remove | [PostCollectionRemoveEventListener|api:org.hibernate.event.PostCollectionRemoveEventListener]
post-collection-update| [PostCollectionUpdateEventListener|api:org.hibernate.event.PostCollectionUpdateEventListener]
{table}

{hidden}For example, you could register a class @AuditEventListener@ which implements @PostInsertEventListener@, @PostUpdateEventListener@, and @PostDeleteEventListener@ using the following in an application:{hidden}
たとえば、次のようにして、アプリケーションに@PostInsertEventListener@と@PostUpdateEventListener@と@PostDeleteEventListener@を実装した@AuditEventListener@クラスを登録できます:

{code}
beans = {

   auditListener(AuditEventListener)

   hibernateEventListeners(HibernateEventListeners) {
      listenerMap = ['post-insert': auditListener,
                     'post-update': auditListener,
                     'post-delete': auditListener]
   }
}
{code}

{hidden}or use this in a plugin:{hidden}
または、プラグイン上であれば次のようにします:

{code}
def doWithSpring = {

   auditListener(AuditEventListener)

   hibernateEventListeners(HibernateEventListeners) {
      listenerMap = ['post-insert': auditListener,
                     'post-update': auditListener,
                     'post-delete': auditListener]
   }
}
{code}

{hidden}h4. Automatic timestamping{hidden}
h4. 自動タイムスタンプ

{hidden}If you define a @dateCreated@ property it will be set to the current date for you when you create new instances. Likewise, if you define a @lastUpdated@ property it will be automatically be updated for you when you change persistent instances.{hidden}
@dateCreated@プロパティを定義した場合、新しいインスタンスを新規保存したときに現在の日時がセットされます。
同様に、@lastUpdated@プロパティを定義した場合は、永続化されたインスタンスが変更されるときにその値が自動的に更新されます。

{hidden}If this is not the behaviour you want you can disable this feature with:{hidden}
この挙動を望まない場合は、次のようにしてこの機能を無効化できます:

{code:java}
class Person {
   Date dateCreated
   Date lastUpdated
   static mapping = {
      autoTimestamp false
   }
}
{code}

{warning}
{hidden}If you have @nullable: false@ constraints on either @dateCreated@ or @lastUpdated@, your domain instances will fail validation - probably not what you want. Omit constraints from these properties unless you disable automatic timestamping.{hidden}
もし@dateCreated@や@lastUpdated@に@nullable: false@を指定すると、おそらくあなたの望んだ動作ではないでしょうが、ドメインインスタンスのバリデーションに失敗します。
自動タイムスタンプを無効化しない場合は、これらのプロパティに制約を与えないでください。
{warning}
