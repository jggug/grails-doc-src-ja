{hidden}You can customize how GORM generates identifiers for the database using the DSL. By default GORM relies on the native database mechanism for generating ids. This is by far the best approach, but there are still many schemas that have different approaches to identity.{hidden}
DSLを用いて、GORMがデータベース上の識別子を生成する方法をカスタマイズできます。
デフォルトでは、GORMはIDの生成をデータベース固有の機構に頼っています。
これは最良のアプローチですが、アイデンティティの管理方法として異なるアプローチをとるスキーマも多くあります。

{hidden}To deal with this Hibernate defines the concept of an id generator. You can customize the id generator and the column it maps to as follows:{hidden}
それらを取り扱えるように、HibernateはIDジェネレータという概念を定義しています。
IDジェネレータとそれに対応するカラムは次のようにカスタマイズできます:

{code:java}
class Person {
    ...
    static mapping = {
        table 'people'
        version false
        id generator: 'hilo',
           params: [table: 'hi_value',
                    column: 'next_value',
                    max_lo: 100]
    }
}
{code}

{hidden}In this case we're using one of Hibernate's built in 'hilo' generators that uses a separate table to generate ids.{hidden}
この例では、Hibernateにビルトインされているhiloジェネレータを使っています。このジェネレータは、IDを生成するために個別のテーブルを使います。

{note}
{hidden}For more information on the different Hibernate generators refer to the [Hibernate reference documentation|http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html/mapping.html#mapping-declaration-id-generator]{hidden}
Hibernateの各種ジェネレータについての情報は、[Hibernateリファレンスドキュメント|http://docs.jboss.org/hibernate/core/3.6/reference/ja-JP/html/mapping.html#mapping-declaration-id-generator]を参照してください。
{note}

{hidden}Although you don't typically specify the @id@ field (Grails adds it for you) you can still configure its mapping like the other properties. For example to customise the column for the id property you can do:{hidden}
Grailsが自動的に追加してくれるため、通常はわざわざ@id@フィールドを指定することはありませんが、
他のプロパティと同様にマッピングを変更することもできます:

{code:java}
class Person {
    ...
    static mapping = {
        table 'people'
        version false
        id column: 'person_id'
    }
}
{code}
