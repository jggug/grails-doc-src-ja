{hidden}h4. Improved Dependency Management{hidden}
h4. 依存管理の向上

{hidden}The default dependency resolution engine used by Grails has been changed to [Aether|http://eclipse.org/aether], the dependency resolution engine used by Maven. Which engine you use can be configured in @BuildConfig@:{hidden}
Grailsでデフォルトで使用されている依存管理エンジンが、Mavenで使用されているエンジンの [Aether|http://eclipse.org/aether] に変更されました。 @BuildConfig@ で設定をすることでどちらのエンジンを使用するか変更可能です。

{code}
grails.project.dependency.resolver = "maven" // or ivy
{code}

{hidden}Using Aether dependency resolution in Grails results in the same behavior as when using the Maven build tool, meaning improved snapshot handling, understanding of custom packaging types and so on.{hidden}
Aether依存管理を使用するとGrailsではMavenビルドツールと同じ振る舞いをします。これは、前と比べてスナップショットハンドリングの向上やカスタムパッケージング等の機能向上を意味します。

{hidden}In addition, the [dependency-report|commandLine] command has been updated to print the dependency graph of the console, which helps in diagnosing dependency resolution failures. See the chapter on [Dependency Resolution|guide:dependencyResolution] for more information.{hidden}
そしてさらに、 [dependency-report|commandLine] コマンドも改良され、依存問題の解決を手助けするために、依存関係のグラフがコンソールに表示されるようになりました。 詳しくは [依存性解決|guide:dependencyResolution] のドキュメントを参照してください。

{hidden}h4. Data Binder{hidden}
h4. データバインダー

{hidden}Grails 2.3 includes a new data binding mechanism which is more flexible and easier to maintain than the data binder used in previous versions.  The new data binder includes numerous enhancements including:{hidden}
Grails 2.3では、以前のバージョンよりもフレキシブルで保守性の高く簡単な新データバインダーを実装しています。

{hidden}
* Custom date formats on a per field basis using [BindingFormat|api:org.grails.databinding.BindingFormat]
* User defined data converters using [ValueConverter|api:org.grails.databinding.converters.ValueConverter]
* User defined formatted data converters using [BindingFormat|api:org.grails.databinding.BindingFormat] and [FormattedValueConverter|api:org.grails.databinding.converters.FormattedValueConverter]
* Custom binding on a per class basis using [BindUsing|api:org.grails.databinding.BindUsing]
* Custom binding on a per field basis using [BindUsing|api:org.grails.databinding.BindUsing]
* By default all blank and empty Strings will be converted to null during data binding (configurable)
{hidden}

* フィールドごとのカスタムデータフォーマット - [BindingFormat|api:org.grails.databinding.BindingFormat]
* ユーザ定義可能なデータコンバーター - [ValueConverter|api:org.grails.databinding.converters.ValueConverter]
* ユーザ定義フォーマットデータコンバーター - [BindingFormat|api:org.grails.databinding.BindingFormat]  [FormattedValueConverter|api:org.grails.databinding.converters.FormattedValueConverter]
* クラスごとのカスタムバインディング - [BindUsing|api:org.grails.databinding.BindUsing]
* フィールドごとのカスタムバインディング - [BindUsing|api:org.grails.databinding.BindUsing]
* デフォルトで全ての空文字列とブランクはデータバインディングでnullに変換されます(設定可能)

{hidden}See the [Data Binding|guide:dataBinding] section for details.{hidden}
詳細は [データバインディング|guide:dataBinding] のセクションを参照してください。

{hidden}The legacy data binder may be used by assigning @true@ to the @grails.databinding.useSpringBinder@ property in @grails-app/conf/Config.groovy@.  Note that the legacy binder does not support any of the new features provided by the new data binder.{hidden}
@grails-app/conf/Config.groovy@ の @grails.databinding.useSpringBinder@ プロパティを @true@ にすることで以前のデータバインダーに変更することができます。 以前のバインダーは今回実装された新機能には対応していません。

h4. リクエストボディをコマンドオブジェクトにバインド

{hidden}If a request is made to a controller action which accepts a command object and the request includes a body, the body will be parsed and used to do data binding to the command object.  This simplifies use cases where a request includes a JSON or XML body (for example) that can be bound to a command object.  See the [Command Objects|guide:commandObjects] documentation for more details.{hidden}

コントローラアクションがコマンドオブジェクトを受け取れる状態でリクエストがボディを含んでいる場合、ボディの内容はパースされコマンドオブジェクトにデータバインドされます。この機能は、リクエストの内容が対象のコマンドオブジェクトに対応したJSONまたXMLのボディを含んでいる処理を単純化します。
詳細は [Command Objects|guide:commandObjects] のドキュメントを参照してください。

h4. ドメインクラスをコマンドオブジェクトとして使用する際の振る舞い

{hidden}When a domain class is used as a command object and there is an @id@ request parameter, the framework will retrieve the instance of the domain class from the database using the @id@ request parameter.  See the [Command Objects|guide:commandObjects] documentation for more details.{hidden}

ドメインクラスをコマンドオブジェクトとして使用して、リクエストパラメータに @id@ が存在した場合は、 @id@ を使用してデータベースからドメインクラスインスタンスを取り出します。 詳細は [Command Objects|guide:commandObjects] のドキュメントを参照してください。


{hidden}h4. Forked Execution{hidden}
h4. フォーク実行 

{hidden}All major commands can now be forked into a separate JVM, thus isolating the build path from the runtime / test paths. Forked execution can be controlled via the @BuildConfig@:{hidden}
全てのメジャーなコマンドが別々のJVMへフォークされるようになり、ビルドパスをランタイム/テストから分離します。 フォーク実行のパラメータは @BuildConfig@ に定義できます:

{hidden}
{code}
grails.project.fork = [
   test: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, daemon:true], // configure settings for the test-app JVM
   run: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256], // configure settings for the run-app JVM
   war: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256], // configure settings for the run-war JVM
   console: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256]// configure settings for the Console UI JVM
]
{code}
{hidden}
{code}
grails.project.fork = [
   test: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, daemon:true], // test-app用JVMへの設定
   run: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256], // run-app用JVMへの設定
   war: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256], // run-war用JVMへの設定
   console: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256]// console用JVMへの設定
]
{code}

{hidden}See the documentation on [Forked Mode|guide:forkedMode] for more information.{hidden}
詳しくは [フォークモード|guide:forkedMode] のドキュメントを参照してください。

{hidden}h4. Test Runner Daemon{hidden}
h4. テストランナーデーモン

{hidden}To speed up testing when using forked execution a new daemon will start-up in the background to run tests when using interactive mode. You can restart the daemon with the @restart-daemon@ command from interactive mode:{hidden}
インタラクティブモードでテストを実行する際にバックグラウンドでデーモンが起動してテストがフォーク実行されテスト効率がアップします。デーモンはインタラクティブモードで @restart-daemon@ コマンド実行すると再起動できます。

{code}
$ grails> restart-daemon
{code}

{hidden}h4. Server-Side REST Improvements{hidden}
h4. サーバサイドRESTの向上

{hidden}Grails' [REST support|guide:REST] has been significantly improved with the addition of the following features:{hidden}
Grailsの[REST対応|guide:REST]は、大きく向上しました、そして以下の新機能も追加されました。

{hidden}
* Rich [REST URL Mapping support|guide:restfulMappings] with supports for resource mappings, singular resource mappings, nested resources, versioning and more
* New extensible response rendering and binding APIs
* Support for HAL, Atom and Hypermedia (HATEAOS)
* Scaffolding for REST controllers
{hidden}

* リソースマッピング、シンギュラリソースマッピング、ネステッドリソース、バージョニングなどの、豊富な[REST URLマッピング|guide:restfulMappings]サポート
* 新たな拡張可能なレスポンスレンダリングとバインディングAPI
* HAL, Atom, Hypermedia (HATEAOS)対応
* RESTコントローラのスカッフォルディング

{hidden}See the [user guide|guide:REST] for more information.{hidden}
詳しくは[ドキュメント|guide:REST]を参照してください。


{hidden}h4. New Scaffolding 2.0 Plugin{hidden}
h4. スカッフォルディング2.0プラグイン

{hidden}Grails' Scaffolding feature has been split into a [separate plugin|http://grails.org/plugin/scaffolding]. Version 2.0 of the plugin includes support for generating REST controllers, Async controllers, and Spock unit tests.{hidden}
Grailsでのスカッフォルディング機能は[プラグイン|http://grails.org/plugin/scaffolding]での提供として切り離されました。プラグインのバージョン2.0では、RESTコントローラ、AsyncコントローラとSpockユニットテストをサポートしています。

{hidden}h4. URL Mappings May Specify A Redirect{hidden}
h4. URLマッピングのリダイレクト指定

{hidden}URL Mappings may now specify that a redirect should be triggered when the mapping matches an incoming request:{hidden}
URLマッピングでリダイレクトが指定できるようになりました。リクエストがマッピングにマッチしたらトリガーされます。
{code:java}
class UrlMappings {
    static mappings = {
        "/viewBooks"(redirect: '/books/list')
        "/viewAuthors"(redirect: [controller: 'author', action: 'list'])
        "/viewPublishers"(redirect: [controller: 'publisher', action: 'list', permanent: true])

        // ...
    }
}
{code}

{hidden}See the [user guide|guide:redirectMappings] for more information.{hidden}
詳しくは[ドキュメント|guide:redirectMappings]を参照してください。

{hidden}h4. Async support {hidden}
h4. 非同期サポート

{hidden}Grails 2.3 features new [Asynchronous Programming APIs|guide:async] that allow for asynchronous processing of requests and integrate seamlessly with GORM. Example:{hidden}
Grails 2.3では、リクエストの非同期処理と、GORMとシームレスに統合した新たな[非同期プログラミングAPI|guide:async]を提供しています。 例:

{code}
import static grails.async.Promises.*
...
def index() {
   tasks books: Book.async.list(),
         totalBooks: Book.async.count(),
         otherValue: {
           // do hard work
         }
}
{code}

{hidden}See [the documentation|guide:async] for further information.{hidden}
詳しくは、 [ドキュメント|guide:async] を参照してください。

{hidden}h4. Encoding / Escaping Improvements {hidden}
h4. エンコーディング / エスケーピングの向上

{hidden}Grails 2.3 features dedicated support for [Cross Site Scripting (XSS) prevention|guide:xssPrevention], including :{hidden}
Grails 2.3では専用の [クロスサイトスクリプティング(XSS)防御|guide:xssPrevention]を実装しています。

{hidden}
* Defaulting to HTML escaping all GSP expressions and scriptlets
* Context sensitive encoding switching for tags
* Double encoding prevention
* Optional automatic encoding of all data in a GSP page not considered safe
{hidden}
* デフォルトでGSPエクスプレッションとスクリプトレットをHTMLエスケーピング
* タグでの状況依存エンコーディング切替
* 多重エンコーディング防止
* GSPページ内の全てのデータに対して安全と判断しない場合の自動エンコーディング

{hidden}See the documentation on [Cross Site Scripting (XSS) prevention|guide:xssPrevention] for more information.{hidden}
詳しくは、 [クロスサイトスクリプティング(XSS)防御|guide:xssPrevention] のドキュメントを参照してください。

{hidden}h4. Hibernate 3 and 4 support {hidden}
h4. Hibernate 3と4をサポート

{hidden}The GORM for Hibernate 3 support for Grails has been extracted into a separate project, allowing new support for Hibernate 4 as a separate plugin.{hidden}
新たにHibernate 4をプラグインでサポートするために、Hibernate 3用のGORMは、本体から別のプラグインプロジェクトとなりました。

{hidden}h4. Controller Exception Handling{hidden}
h4. コントローラ例外ハンドリング

{hidden}Controllers may define exception handler methods which will automatically be invoked any time an action in that controller throws an exception.{hidden}
コントローラのアクションが投げたExceptionをハンドリングするメソッドをコントローラに定義できるようになりました。

{code:java}
// grails-app/controllers/demo/DemoController.groovy
package demo

class DemoController {

    def someAction() {
        // do some work
    }

    def handleSQLException(SQLException e) {
        render 'A SQLException Was Handled'
    }

    def handleBatchUpdateException(BatchUpdateException e) {
        redirect controller: 'logging', action: 'batchProblem'
    }

    def handleNumberFormatException(NumberFormatException nfe) {
        [problemDescription: 'A Number Was Invalid']
    }
}
{code}

{hidden}See the [controller exception handling|guide:controllerExceptionHandling] docs for more information.{hidden}
詳しくは、 [ドキュメント|guide:controllerExceptionHandling] を参照してください。

{hidden}h4. Namespaced Controllers{hidden}
h4. コントローラネームスペース

{hidden}Controllers may now be defined in a namespace which allows for multiple controllers to be defined with the same name in different packages.{hidden}
別々のパッケージでの同じ名称のコントローラを使用できるように、コントローラにネームスペースが定義できるようになりました。
{code}
// grails-app/controllers/com/app/reporting/AdminController.groovy
package com.app.reporting

class AdminController {

    static namespace = 'reports'

    // ...
}
{code}

{code}
// grails-app/controllers/com/app/security/AdminController.groovy
package com.app.security

class AdminController {

    static namespace = 'users'

    // ...
}
{code}


{code}
// grails-app/conf/UrlMappings.groovy
class UrlMappings {

    static mappings = {
        '/userAdmin' {
            controller = 'admin'
            namespace = 'users'
        }

        '/reportAdmin' {
            controller = 'admin'
            namespace = 'reports'
        }

        "/$namespace/$controller/$action?"()
    }
}
{code}

{code}
<g:link controller="admin" namespace="reports">Click For Report Admin</g:link>
<g:link controller="admin" namespace="users">Click For User Admin</g:link>
{code}

詳しくは、 [ドキュメント|guide:namespacedControllers] を参照してください。


{hidden}h4. Command Line {hidden}
h4. コマンドライン

{hidden}
The @create-app@ command will now by default generate the command line grailsw wrapper for newly created applications.  The @--skip-wrapper@ switch may be used to prevent the wrapper from being generated.
{hidden}
@create\-app@ コマンドがデフォルトでgrailswラッパーを生成するようになりました。ラッパーを生成しない場合は @\-\-skip\-wrapper@ オプションを指定してください。

{code}
grails create-app appname --skip-wrapper
{code}



----

