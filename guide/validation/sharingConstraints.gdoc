{hidden}
A common pattern in Grails is to use [command objects|guide:commandObjects] for validating user-submitted data and then copy the properties of the command object to the relevant domain classes. This often means that your command objects and domain classes share properties and their constraints. You could manually copy and paste the constraints between the two, but that's a very error-prone approach. Instead, make use of Grails' global constraints and import mechanism.
{hidden}
ユーザが送信したデータのバリデーションにおいて、Grailsにおける一般的なパターンは、[コマンドオブジェクト|guide:commandObjects]使い、コマンドオブジェクトのプロパティを該当のドメインクラスへコピーすることです。
これはしばしばコマンドオブジェクトとドメインクラスの間で、プロパティとそのプロパティに対する制約を共有することになります。
それぞれの制約を手動でコピー・アンド・ペーストすることもできますが、これは間違いを起こしやすいアプローチです。
代わりに、Grailsのグローバル制約とインポート機構を使用しましょう。

{hidden}
h3. Global Constraints
{hidden}
h3. グローバル制約

{hidden}
In addition to defining constraints in domain classes, command objects and [other validateable classes|guide:validationNonDomainAndCommandObjectClasses], you can also define them in @grails-app/conf/Config.groovy@:
{hidden}
ドメインクラスやコマンドオブジェクト、[他のバリデーション可能なクラス|guide:validationNonDomainAndCommandObjectClasses]内で制約を定義するほかに、@grails-app/conf/Config.groovy@内でも制約を定義できます。

{code}
grails.gorm.default.constraints = {
    '*'(nullable: true, size: 1..20)
    myShared(nullable: false, blank: false)
}
{code}

{hidden}
These constraints are not attached to any particular classes, but they can be easily referenced from any validateable class:
{hidden}
これらの制約は特定のクラスへ関連付けられていませんが、バリデーション可能なクラスから簡単に参照できます:

{code:java}
class User {
    ...

    static constraints = {
        login shared: "myShared"
    }
}
{code}

{hidden}
Note the use of the @shared@ argument, whose value is the name of one of the constraints defined in @grails.gorm.default.constraints@. Despite the name of the configuration setting, you can reference these shared constraints from any validateable class, such as command objects.
{hidden}
@shared@引数には@grails.gorm.default.constraints@内に定義した制約の名前の1つを指定していることに注目してください。
このように設定ファイル内の名前であるにもかかわらず、コマンドオブジェクトのようなバリデーション可能なクラスから共有された制約を参照できます。

{hidden}
The '*' constraint is a special case: it means that the associated constraints ('nullable' and 'size' in the above example) will be applied to all properties in all validateable classes. These defaults can be overridden by the constraints declared in a validateable class.
{hidden}
「*」制約は特別な意味があります。この@'\*'@に関連した制約(上記の例では@nullable@と@size@)はバリデーション可能なクラス内のすべてのプロパティへ適用されます。
これらのデフォルト設定はバリデーション可能なクラス内で宣言する制約によって上書き可能です。

{hidden}
h3. Importing Constraints
{hidden}
h3. 制約をインポートする

{hidden}
Grails 2 introduced an alternative approach to sharing constraints that allows you to import a set of constraints from one class into another.
{hidden}
Grails 2では共有制約に代わる、あるクラスから他のクラスへ制約のセットをインポートするというアプローチを導入しました。

{hidden}
Let's say you have a domain class like so:
{hidden}
以下のようなドメインクラスがあるとしましょう:

{code}
class User {
    String firstName
    String lastName
    String passwordHash

    static constraints = {
        firstName blank: false, nullable: false
        lastName blank: false, nullable: false
        passwordHash blank: false, nullable: false
    }
}
{code}

{hidden}
You then want to create a command object, @UserCommand@, that shares some of the properties of the domain class and the corresponding constraints. You do this with the @importFrom()@ method:
{hidden}
このとき、ドメインクラスのプロパティと同じプロパティを持ち、そのプロパティに付随する制約が定義された、コマンドオブエクトを作りたいとします。
これは@importFrom()@メソッドで実現できます:

{code}
class UserCommand {
    String firstName
    String lastName
    String password
    String confirmPassword

    static constraints = {
        importFrom User

        password blank: false, nullable: false
        confirmPassword blank: false, nullable: false
    }
}
{code}

{hidden}
This will import all the constraints from the @User@ domain class and apply them to @UserCommand@. The import will ignore any constraints in the source class (@User@) that don't have corresponding properties in the importing class (@UserCommand@). In the above example, only the 'firstName' and 'lastName' constraints will be imported into @UserCommand@ because those are the only properties shared by the two classes.
{hidden}
これは@User@ドメインクラスからすべての制約をインポートし、@UserCommand@へこれらの制約を適用します。
このインポートは、インポート先のクラス(@UserCommand@)に関係がないプロパティの場合、インポート元のクラス(@User@)内のそのプロパティの制約を無視します。
上記の例では、@firstName@と@lastName@のみが両方のクラスで共有されてるため、これらの制約のみが@UserCommand@へインポートされます。

{hidden}
If you want more control over which constraints are imported, use the @include@ and @exclude@ arguments. Both of these accept a list of simple or regular expression strings that are matched against the property names in the source constraints. So for example, if you only wanted to import the 'lastName' constraint you would use:
{hidden}
もし、インポートする制約をより細かく制御したい場合、@include@と@exclude@の引数が使えます。
両者ともに、インポート元の制約のプロパティ名に一致する単なる文字列、または正規表現文字列のリストを受け取ります。
例えば、@lastName@制約だけをインポートしたい場合は以下のように使います:

{code}
...
static constraints = {
    importFrom User, include: ["lastName"]
    ...
}
{code}

{hidden}
or if you wanted all constraints that ended with 'Name':
{hidden}
または@Name@で終わるすべての制約をインポートしたい場合:

{code}
...
static constraints = {
    importFrom User, include: [/.*Name/]
    ...
}
{code}

{hidden}
Of course, @exclude@ does the reverse, specifying which constraints should _not_ be imported.
{hidden}
もちろん@exclude@はこの逆で、インポートすべきでない制約を指定します。
