{hidden}h4. Validation Basics{hidden}
h4. バリデーションの基礎

{hidden}Call the [validate|domainClasses] method to validate a domain class instance:{hidden}
ドメインクラスのインスタンスをバリデーションするには、[validate|domainClasses]メソッドを呼び出します:

{code:java}
def user = new User(params)

if (user.validate()) {
    // do something with user
}
else {
    user.errors.allErrors.each {
        println it
    }
}
{code}

{hidden}The @errors@ property on domain classes is an instance of the Spring [Errors|api:org.springframework.validation.Errors] interface. The @Errors@ interface provides methods to navigate the validation errors and also retrieve the original values.{hidden}
ドメインクラスの@errors@プロパティは、Springの[Errors|api:org.springframework.validation.Errors]インターフェイスのインスタンスです。@Errors@インターフェイスは、バリデーションエラーの参照や元の値の取得などのメソッドを提供します。

{hidden}h4. Validation Phases{hidden}
h4. バリデーションのフェーズ

{hidden}Within Grails there are two phases of validation, the first one being [data binding|guide:dataBinding] which occurs when you bind request parameters onto an instance such as:{hidden}
Grailsではバリデーションに2つのフェーズがあります。1つ目は[data binding|guide:dataBinding]であり、インスタンスにリクエストパラメータをバインドするときに発生します:

{code:java}
def user = new User(params)
{code}

{hidden}At this point you may already have errors in the @errors@ property due to type conversion (such as converting Strings to Dates). You can check these and obtain the original input value using the @Errors@ API:{hidden}
この時点で既に型変換に起因する@errors@プロパティが存在する場合があります(文字列を日付に変換しようとするなど)。@Errors@ APIを使用することで、エラーの有無や元の入力値を取得することができます:

{code:java}
if (user.hasErrors()) {
    if (user.errors.hasFieldErrors("login")) {
        println user.errors.getFieldError("login").rejectedValue
    }
}
{code}

{hidden}The second phase of validation happens when you call [validate|domainClasses] or [save|domainClasses]. This is when Grails will validate the bound values againts the [constraints|domainClasses] you defined. For example, by default the [save|domainClasses] method calls @validate@ before executing, allowing you to write code like:{hidden}
バリデーションの2つ目のフェーズが発生するのは、[validate|domainClasses]や[save|domainClasses]が呼び出されたときです。
ここでは、バインドされた値を[constraints|domainClasses]の定義によってGrailsがバリデーションします。
たとえば、デフォルトで[save|domainClasses]メソッドは@validate@を呼び出すので、次のようなコードが書けます:

{code:java}
if (user.save()) {
    return user
}
else {
    user.errors.allErrors.each {
        println it
    }
}
{code}
